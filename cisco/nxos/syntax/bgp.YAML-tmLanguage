# [PackageDev] target_format: plist, ext: tmLanguage
name: .
scopeName: cisco.nxos.bgp
uuid: 34955740-df89-4de1-9001-10d53738fa23

patterns:
- include: '#bgp'

repository:

  bgp:
    patterns:
    - name: bgp
      begin: ^(router)\s+(bgp)\s+(\d+)
      beginCaptures:
        '0': {name: bgp.block}
        '1': {name: variable.parameter}
        '2': {name: support.constant}
        '3': {name: constant.language}
        '4': {name: invalid.illegal}
      end: ^(?=(?:\s*(?=(?:\n\s*\n)*(?:\s+\S))$)|(?:[^!\s])|(?:\s*exit))
      patterns:
      - include: '#vrf'
      #- include: '#exit-address-family'
      - include: text.network.cisco.scope
      - include: text.network.cisco

  vrf:
    patterns:
    - name: vrf
      begin: ^\s*(vrf)\s+(\S+)$
      beginCaptures:
        '0': {name: bgp.vrf.block}
        '1': {name: variable.parameter}
        '2': {name: string.unquoted}
      end: ^(?=((\s*((vrf)|(exit)))|\S))
      patterns:
      - include: '#ipv4-address-family'
      - include: '#ipv6-address-family'
      - include: '#log-neighbor-changes'

  log-neighbor-changes:
    patterns:
    - name: network
      match: ^\s+(log-neighbor-changes)\s*(\s+\S.*)?$
      captures:
        '1': {name: support.constant}
        '2': {name: invalid.illegal}

  ipv6-address-family:
    patterns:
    - name: ipv6.address.family
      begin: ^\s*(address-family)\s+(ipv6)\s+(unicast)
      beginCaptures:
        '1': {name: variable.parameter}
        '2': {name: support.constant}
        '3': {name: support.constant}
        '4': {name: invalid.illegal}
      end: ^(?=(?:\s*(?=(?:\n\s*\n)*(?:\s+\S))$)|(?:[^!\s])|(?:\s*(?:(?:(?:exit-)?address-family)|(?:exit)|(?:end))))
      patterns:
      - include: '#ipv6-network'
      - include: '#ipv6-neighbor'
      - include: text.network.cisco.scope
      - include: text.network.cisco

  ipv4-address-family:
    patterns:
    - name: ipv4.address.family
      begin: ^\s*(address-family)\s+(ipv4)\s+(unicast)\s*(\s+\S.*)?$
      beginCaptures:
        '1': {name: variable.parameter}
        '2': {name: support.constant}
        '3': {name: support.constant}
        '4': {name: invalid.illegal}
      end: ^(?=(?:\s*(?=(?:\n\s*\n)*(?:\s+\S))$)|(?:[^!\s])|(?:\s*(?:(?:(?:exit-)?address-family)|(?:exit)|(?:end))))
      patterns:
      - include: '#ipv4-network'
      - include: '#ipv4-neighbor'
      - include: text.network.cisco.scope
      - include: text.network.cisco

  ipv4-network:
    patterns:
    - name: ipv4.network
      match: ^\s*(network)\s+((?:(?:(?:[0-2]?\d?\d)\.){3}[0-2]?\d?\d)/\d+)
      captures:
        '1': {name: support.constant}
        '2': {name: constant.numeric}

  ipv6-network:
    patterns:
    - name: ipv6.network
      match: ^\s*(network)\s+((?:(?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(?:%.+)?|::)/\d+)
      captures:
        '1': {name: support.constant}
        '2': {name: constant.numeric}

  ipv6-neighbor:
    patterns:
    - name: ipv6.neighbor
      begin: ^\s+(neighbor)\s+((?:(?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(?:%.+)?|::))$
      beginCaptures:
        '1': {name: support.constant}
        '2': {name: constant.numeric}
        '3': {name: constant.numeric}
        '4': {name: invalid.illegal}
      end: ^(?=(?:(?:\s*(?:address-family|neighbor|vrf|exit))|\S))
      patterns:
      - include: '#inherit-peer'
      - include: '#prefix-list'
      - include: '#remote-as'
      - include: '#password'
      - include: '#next-hop-self'
      - include: text.network.cisco.scope
      - include: text.network.cisco

  ipv4-neighbor:
    patterns:
    - name: ipv4.neighbor
      begin: ^\s*(neighbor)\s+((?:(?:(?:[0-2]?\d?\d)\.){3}[0-2]?\d?\d))$
      beginCaptures:
        '1': {name: variable.parameter}
        '2': {name: constant.numeric}
      end: ^(?=(?:(?:\s*(?:address-family|neighbor|vrf|exit))|\S))
      patterns:
      - include: '#inherit-peer'
      - include: '#prefix-list'
      - include: '#remote-as'
      - include: '#password'
      - include: '#next-hop-self'
      - include: text.network.cisco.scope
      - include: text.network.cisco

  inherit-peer:
    patterns:
    - name: inherit.peer
      match: ^\s+(inherit)\s+(peer)\s+(\S+)
      captures:
        '1': {name: support.constant}
        '2': {name: constant.numeric}
        '3': {name: string.unquoted}

  remote-as:
    patterns:
    - name: remote.as
      match: ^\s+(remote-as)\s+(\d+)
      captures:
        '1': {name: support.constant}
        '2': {name: constant.numeric}

  prefix-list:
    patterns:
    - name: prefix-list
      match: ^\s+(prefix-list)\s+(\S+)\s+((?:in)|(?:out))
      captures:
        '1': {name: support.constant}
        '2': {name: string.unquoted}
        '3': {name: support.constant}

  next-hop-self:
    patterns:
    - name: next-hop-self
      match: ^\s+(next-hop-self)
      captures:
        '1': {name: support.constant}

  password:
    patterns:
    - name: password
      match: ^\s+(password)\s+(\d+)\s+(\S+)
      captures:
        '1': {name: support.constant}
        '2': {name: constant.numeric}
        '3': {name: string.unquoted}
