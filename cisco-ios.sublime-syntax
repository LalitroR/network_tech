%YAML 1.2
---

# Copyright 2017 Glen Harmon

name: Cisco IOS
file-extensions:
  - cisco-ios
  - ios
first_line_match: |
  (?xi)
    \s*
    [#!]
    .*
    (?:
      (?:ios)
    )
scope: text.network.cisco.ios text.network.cisco.configure_terminal


variables:
  comment: '(?:[!#])'
  pop_ctx: '^\s*exit\s*$'
  pop_address_family_ctx: '^\s*(?:exit-address-family)\s*$'
  command_end: '(?:\s|{{comment}}|$)'
  line_number: '^\s*\d+'
  route_target: '\d+:\d+'
  ah_transform: |
    (?xi)
    (?:
      (?:ah-md5-hmac)|
      (?:ah-sha-hmac)
    )
  authentication_methods: |
    (?xi)
    (?:
      (?:auth-guest)|
      (?:enable)|
      (?:guest)|
      (?:if-authenticated)|
      (?:if-needed)|
      (?:krb5)|
      (?:krb-instance)|
      (?:krb-telnet)|
      (?:line)|
      (?:local)|
      (?:none)|
      (?:radius)|
      (?:rcmd)|
      (?:tacacsplus)|
      (?:tacacs)
    )
  esp_encryption_transform: |
    (?xi)
    (?:
      (?:esp-des)|
      (?:esp-null)|
      (?:esp-3des)
    )
  esp_authentication_transform: |
    (?xi)
    (?:
      (?:esp-md5-hmac)|
      (?:esp-sha-hmac)
    )
  dscp: |
    (?xi)
    (?:
      (?:AF11)|
      (?:AF12)|
      (?:AF13)|
      (?:AF21)|
      (?:AF22)|
      (?:AF23)|
      (?:AF31)|
      (?:AF32)|
      (?:AF33)|
      (?:AF41)|
      (?:AF42)|
      (?:AF43)|
      (?:CS1)|
      (?:CS2)|
      (?:CS3)|
      (?:CS4)|
      (?:CS5)|
      (?:CS6)|
      (?:CS7)|
      (?:EF)
    )
  hashing_algorithms: |
    (?xi)
    (?:
      (?:md5)
    )
  configure_terminal_ctx_words: |
    (?xi)
    \s*
    (?:
      (?:aaa)|
      (?:access-list)|
      (?:alias)|
      (?:banner)|
      (?:boot)|
      (?:boot-end-marker)|
      (?:boot-start-marker)|
      (?:Building)|
      (?:class-map)|
      (?:clock)|
      (?:control-plane)|
      (?:diagnostic)|
      (?:enable)|
      (?:exception)|
      (?:hostname)|
      (?:interface)|
      (?:ip\s+
        (?:
          (?:access-list)|
          (?:arp)|
          (?:vrf)|
          (?:route)|
          (?:domain)|
          (?:dhcp)
        )
      )|
      (?:line)|
      (?:logging)|
      (?:mls)|
      (?:mpls)|
      (?:multilink)|
      (?:ntp)|
      (?:policy-map)|
      (?:redundancy)|
      (?:router)|
      (?:route-map)|
      (?:service)|
      (?:snmp-server)|
      (?:spanning-tree)|
      (?:tacacs-server)|
      (?:udld)|
      (?:username)|
      (?:vrf)|
      (?:vlan)|
      (?:vtp)
    )
  policy_map_ctx_words: |
    (?xi)
    \s*
    (?:
      (?:class)|
      (?:{{configure_terminal_ctx_words}})
    )
  vrf_definition_ctx_words: |
    (?xi)
    \s*
    (?:
      {{configure_terminal_ctx_words}}
    )|
    (?:
      (?:route-target)|
      (?:rd)|
      (?:address-family)
    )
  bgp_address_family_ctx_words: |
    (?xi)
    \s*
    (?:
      {{configure_terminal_ctx_words}}
    )|
    (?:
      (?:address-family)|
      (?:template)|
      (?:bgp)|
      (?:timers)
    )
  ip: '(?:(?:(?:[0-2]?\d?\d)\.){3}(?:[0-2]?\d?\d))'
  wildcard_mask: |
    (?xi)
    (?:
      (?:127\.255\.255\.255)|
      (?:63\.255\.255\.255)|
      (?:31\.255\.255\.255)|
      (?:15\.255\.255\.255)|
      (?:7\.255\.255\.255)|
      (?:3\.255\.255\.255)|
      (?:1\.255\.255\.255)|
      (?:0\.255\.255\.255)|
      (?:0\.127\.255\.255)|
      (?:0\.63\.255\.255)|
      (?:0\.31\.255\.255)|
      (?:0\.15\.255\.255)|
      (?:0\.7\.255\.255)|
      (?:0\.3\.255\.255)|
      (?:0\.1\.255\.255)|
      (?:0\.0\.255\.255)|
      (?:0\.0\.127\.255)|
      (?:0\.0\.63\.255)|
      (?:0\.0\.31\.255)|
      (?:0\.0\.15\.255)|
      (?:0\.0\.7\.255)|
      (?:0\.0\.3\.255)|
      (?:0\.0\.1\.255)|
      (?:0\.0\.0\.255)|
      (?:0\.0\.0\.127)|
      (?:0\.0\.0\.63)|
      (?:0\.0\.0\.31)|
      (?:0\.0\.0\.15)|
      (?:0\.0\.0\.7)|
      (?:0\.0\.0\.3)|
      (?:0\.0\.0\.1)|
      (?:0\.0\.0\.0)
    )
  subnet_mask: |
    (?xi)
    (?:
        (?:0\.0\.0\.0)|
        (?:128\.0\.0\.0)|
        (?:192\.0\.0\.0)|
        (?:224\.0\.0\.0)|
        (?:240\.0\.0\.0)|
        (?:248\.0\.0\.0)|
        (?:252\.0\.0\.0)|
        (?:254\.0\.0\.0)|
        (?:255\.0\.0\.0)|
        (?:255\.128\.0\.0)|
        (?:255\.192\.0\.0)|
        (?:255\.224\.0\.0)|
        (?:255\.240\.0\.0)|
        (?:255\.248\.0\.0)|
        (?:255\.252\.0\.0)|
        (?:255\.254\.0\.0)|
        (?:255\.255\.0\.0)|
        (?:255\.255\.128\.0)|
        (?:255\.255\.192\.0)|
        (?:255\.255\.224\.0)|
        (?:255\.255\.240\.0)|
        (?:255\.255\.248\.0)|
        (?:255\.255\.252\.0)|
        (?:255\.255\.254\.0)|
        (?:255\.255\.255\.0)|
        (?:255\.255\.255\.128)|
        (?:255\.255\.255\.192)|
        (?:255\.255\.255\.224)|
        (?:255\.255\.255\.240)|
        (?:255\.255\.255\.248)|
        (?:255\.255\.255\.252)|
        (?:255\.255\.255\.254)|
        (?:255\.255\.255\.255)
    )
  ipv4_prefix_length: '(?:(?:\d?\d)|(?:3[0-2]))'
  ip_prefix: '(?:{{ip}}/{{ipv4_prefix_length}})'
  ipv6_prefix_length: '(?:/1?\d?\d)'
  ipv6_prefix: '(?:(?:(?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(?:%.+)?{{ipv6_prefix_length}}|::/0))'
  ipv6: '(?:(?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(?:%.+)?)'
  vlan_id: |
    (?xi)
    (?:
      (?:[0-3]\d{2,3})|
      (?:40[0-9][0-5])|
      (?:\d{2,3})|
      [1-9]
    )
  vlan_range: |
    (?xi)
    (?:
      {{vlan_id}}
      (?:
        (?:
          (?:-)|(?:,)
        )
        {{vlan_id}}
      )*
    )
  network_address: '(?:{{ip}})\s+(?:{{wildcard_mask}})'
  interface_names: |
    (?xi)
    (?:
      (?:BVI)|
      (?:Ethernet)|
      (?:Et)|
      (?:FastEthernet)|
      (?:Fa)|
      (?:FortyGigabitEthernet)|
      (?:Fo)|
      (?:GigabitEthernet)|
      (?:Gi)|
      (?:loopback)|
      (?:lo)|
      (?:port-channel)|
      (?:po)|
      (?:serial)|
      (?:se)|
      (?:TenGigabitEthernet)|
      (?:Te)|
      (?:tunnel)|
      (?:Dot11Radio)|
      (?:tu)|
      (?:vlan)|
      (?:vl)
    )
  interface_numbers: |
    (?xi)
    (?:\d+(?:/\d+)*(?:\.\d+)?)?
  interface_number_ranged: |
    (?xi)
    (?:\d+(?:/\d+)*(?:\.\d+)?)(?:\s*-\s*\d+)?
  network_target: |
    (?xi)
    (?:
      (?:{{network_address}})|
      (?:{{ip}})|
      (?:any)
    )
  protocol_target: |
    (?xi)
    (?:ip)|
    (?:tcp)|
    (?:udp)|
    (?:esp)|
    (?:icmp)
  port_numbers: '(?:(?:[1-6]?\d{1,4}))'
  port_names: |
    (?xi)
    (?:
      (?:bgp)|
      (?:bootps)|
      (?:bootpc)|
      (?:ssh)|
      (?:ftp-data)|
      (?:ftp)|
      (?:domain)|
      (?:ntp)|
      (?:snmptrap)|
      (?:syslog)|
      (?:telnet)|
      (?:tacacs)|
      (?:isakmp)|
      (?:snmp)
    )
  operators: |
    (?xi)
    (?:
      (?:eq)|
      (?:neq)|
      (?:ge)|
      (?:gt)|
      (?:lt)|
      (?:le)
    )
  port_target: '(?:(?:{{port_numbers}})|(?:{{port_names}}))'
  drives: |
    (?xi)
    (?:
      (?:(?:(?:running)|(?:startup))-config)|
      (?:flash)|
      (?:disk(?:[0-3])?)
    )
  uri: '(?<protocol>(?:t?ftp)|scp)(?<protocol_seperator>://)(?<hostname>(?:\d+\.){3}\d+)(?<path>\/\S*)'
  locations: '(?:{{drive}}|{{uri}})'

contexts:

  main:
    - include: show
    - include: enable
    - include: configure_terminal
    - include: configure_terminal_scope
    - include: do_show
    - include: scope


  prototype:
    - include: device_comment
    - include: pop_ctx_word
    - include: comment
    - include: pipe
    - include: scope

  scope:
    - include: removal
    - include: pop_ctx_word
    - include: comment

  partials:
    - match: |
        (?xi)
        (?:
          ^\s*
          (?:
            (?:access-class)|
            (?:address-family)|
            (?:channel-group)|
            (?:default)|
            (?:deny)|
            (?:description)|
            (?:encapsulation)|
            (?:end)|
            (?:exit)|
            (?:exit-address-family)|
            (?:export)|
            (?:hostname)|
            (?:interface)|
            (?:ipv6)|
            (?:line)|
            (?:logout)|
            (?:name)|
            (?:neighbor)|
            (?:network)|
            (?:no)|
            (?:permit)|
            (?:port-channel)|
            (?:rd)|
            (?:route-target)|
            (?:router)|
            (?:shutdown)|
            (?:snmp-server)|
            (?:standby)|
            (?:switchport)|
            (?:transport)|
            (?:vlan)|
            (?:vrf)|
            (?:write)
          )
          \s
          [^$]*
        )
      scope: text.network.cisco.partial

  pop_on_policy_map_context:
    - match: |
        (?xi)
        (?=
          ^\s*
          {{policy_map_ctx_words}}
        )
      pop: true

  pop_on_configure_terminal_context:
    - match: |
        (?xi)
        (?=
          ^\s*
          {{configure_terminal_ctx_words}}
        )
      pop: true

  pop_on_vrf_definition_context:
    - match: |
        (?xi)
        (?=
          ^\s*
          (?:{{vrf_definition_ctx_words}})
        )
      pop: true

  pop_on_bgp_address_family_context:
    - match: |
        (?xi)
        (?=
          ^\s*
          (?:{{bgp_address_family_ctx_words}})
        )
      pop: true

  removal:
    - meta_include_prototype: false
    - match: ^\s*(no\s[^{{comment}}]*)
      scope: text.network.cisco.removal
      captures:
        1: keyword.other

  pop_ctx_word:
    - match: ^(!)$
      captures:
        1: comment.line
      pop: true
    - match: ({{pop_ctx}})
      pop: true
      captures:
        1: comment.line
    - match: '^\s*(end)\s*$'
      captures:
        1: comment.block.documentation
      pop: true

  pop_context_on_unknown:
    - match: '(?=^\s*[^{{comment}}\s].*$)'
      pop: true

  configure_terminal:
    - match: ^\s*(?:(configure)\s*(terminal))
      # with_prototype:
      #   - include: do_show
      #   - include: scope
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
      # push:
        # - meta_content_scope: text.network.cisco.configure_terminal
        # - include: configure_terminal_scope

  configure_terminal_scope:
    - include: bgp
    - include: ospf
    - include: vty
    - include: vrf
    - include: snmp
    - include: ntp
    - include: vlan
    - include: ip_http
    - include: logging
    - include: service
    - include: monitor
    - include: hostname
    - include: line_con
    - include: username
    - include: line_aux
    - include: ip_route
    - include: interface
    - include: policy_map
    - include: class_map
    - include: aaa_group
    - include: prefix_list
    - include: vrf_upgrade
    - include: ip_dhcp_pool
    - include: ip_classless
    - include: aaa_new_model
    - include: system_version
    - include: enable_password
    - include: aaa_authentication
    - include: ipv6_unicast_routing
    - include: ipv6_general_prefix
    - include: extended_acl
    - include: standard_acl
    - include: extended_acl_old
    - include: route_map
    - include: partials


  device_comment:
    - match: |
        (?xi)
        ^(
          \s*
          {{comment}}
          \s+
          (?:
            (?:on)|
            (?:devices?)
          )
          \s+
          \S.*
        )$
      scope: text.network.cisco.comment
      captures:
        0: cisco.scope
        1: comment.line

  comment:
    - match: ({{comment}}.*)$
      scope: text.network.cisco.comment
      captures:
        1: comment.line

  system_version:
    - match: |
        (?xi)
        ^\s*
        (version)\s+(\d+\.\d+)
      scope: text.network.cisco.ios.version
      captures:
        1: support.constant
        2: constant.numeric

  username:
    - match: |
        (?xi)
        ^\s*
        (username)
        \s+
        (\S+)
        \s+
        (password)
        \s+
        (\d+)
        \s+
        (\S+)
      captures:
        1: support.constant   # username
        2: string.unquoted    # username string
        3: support.constant   # password
        4: constant.numeric   # password type
        5: string.unquoted    # password string

  vrf_upgrade:
    - match: ^\s*(vrf)\s+(upgrade-cli)\s+(multi-af-mode)\s+((?:non-)?common-policies)(?:(?:\s+(vrf)\s+(\S+)(?:\s+(force))?)|(\s+force))?
      captures:
        1: support.constant
        2: support.constant
        3: support.constant
        4: support.constant
        5: support.constant
        6: string.unquoted
        7: support.constant
        8: support.constant

  enable:
    - include: write
    - include: copy
    - include: logout
    - include: configure_terminal
    - include: show_drives

  enable_password:
    - match: |
        (?xi)
        \s*
        (enable)\s+
        (password)\s+
        (\S+)
      captures:
        1: support.constant
        2: support.constant
        3: string.unquoted

  aaa_new_model:
    - match: |
        (?xi)
        \s*
        (aaa)\s+
        (new-model)\s+
      captures:
        1: support.constant
        2: support.constant

  snmp:
    - include: snmp_trap
    - include: snmp_poll
    - include: snmp_contact_location

  snmp_contact_location:
    - match: |
        (?xi)
        \s*
        (snmp-server)\s+
        (location|contact)\s+
        (.*)
      captures:
        1: support.constant       # snmp-server
        2: support.constant       # location
        3: string.unquoted        # location string

  monitor:
    - match: |
        (?xi)
        \s*
        (monitor)\s+(session)\s+(\d+)\s+
        (?:
          (?:
            (source)\s+
            (?:
              (interface)\s+
              (?:
                (?:({{interface_names}})\s*(?:({{interface_number_ranged}})|({{interface_numbers}})))
              )
            )
          )|
          (?:
            (destination)\s+
            (?:
              (?:
                (interface)\s+
                (?:
                  (?:({{interface_names}})\s*({{interface_numbers}}))
                )
              )|
              (?:(analysis-module)\s+(\d+)\s+(data-port)\s+(\d+))
            )
          )
        )
      captures:
        1: support.constant             # monitor
        2: support.constant             # monitor session
        3: constant.numeric             # monitor session id
        4: support.constant             # source
        5: support.constant             # source interface
        6: entity.other.attribute-name  # source interface interface name
        7: constant.numeric             # source interface interface name number range
        8: constant.numeric             # source interface interface name number
        9: support.constant             # destination
        10: support.constant            # destination interface
        11: entity.other.attribute-name # destination interface interface name
        12: constant.numeric            # destination interface interface name number
        13: support.constant            # destination analysis-module
        14: constant.numeric            # destination analysis-module id
        15: support.constant            # destination analysis-module data-port
        16: constant.numeric            # destination analysis-module data-port id

  snmp_poll:
    - match: >
        (?xi)
        \s*
        (snmp-server)\s+
        (community)\s+
        (\S+)
        (\s+(?:(?:RO)|(?:RW)))?
        (\s+\S+)?
      captures:
        1: support.constant       # snmp-server
        2: support.constant       # poll community
        3: string.unquoted        # poll community value
        4: support.constant       # RO / RW
        5: string.unquoted        # ACL value

  snmp_trap:
    - match: >
        (?xi)
        \s*
        (snmp-server)\s+
        (host)\s+
        ({{ip}})\s+
        (?:(version)\s+((?:1)|(?:2c))\s+)?
        (\S+)
      captures:
        1: support.constant       # snmp-server
        2: support.constant       # host
        3: constant.numeric       # ip
        4: support.constant       # version
        5: constant.numeric       # version number
        6: string.unquoted        # trap community

  hostname:
    - match: ^\s*(hostname)\s*(\S+)
      captures:
        1: support.constant
        2: string.unquoted

  ipv6_general_prefix:
    - match: \s*(ipv6\s+general-prefix)\s+(\S+\s+)?((?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:)|:)))(?:%.+)?)(/\d+)(?:\s+(\S.*))?
      scope: ios.ipv6.general-prefix
      captures:
        1: support.constant
        2: string.unquoted
        3: constant.numeric
        4: constant.numeric
        5: invalid.illegal

  logging:
    - match: |
        (?xi)
        ^\s*
        (logging)\s+
        (?:
          ({{ip}})|
          (?:
            (facility)\s+
            (
              (?:local5)
            )
          )|
          (?:(source-interface)\s+({{interface_names}})\s*({{interface_numbers}}))
        )
      captures:
        1: support.constant                # logging
        2: constant.numeric                # logging ip
        3: support.constant                # logging facility
        4: support.constant                # logging facility string
        5: support.constant                # logging facility string
        6: entity.other.attribute-name     # logging source-interface
        7: constant.numeric                # logging source-interface interface_type

  standard_acl:
    - match: ^\s*(ip)\s+(access-list)\s+(standard)\s+(?:(\d+)|(\S+))
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: support.constant
        4: constant.numeric
        5: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.acl.standard
        - include: standard_ace
        - include: partials
        - include: pop_on_configure_terminal_context

  standard_ace:
    - match: |
        (?xi)
        ^\s*
        ({{line_number}}\s+)?
        (?:(permit)|(deny))\s+
        (?:(?:({{network_target}})|(?:(host)\s+({{ip}}))))
      scope: text.network.cisco.acl.standard.ace
      captures:
        1: constant.numeric
        2: entity.other.attribute-name
        3: keyword.other
        4: constant.numeric
        5: support.constant
        6: constant.numeric

  extended_acl_old:
    - match: |
        (?xi)
        ^\s*
        (access-list)\s+(\d{3})\s+
        (?:
          (permit)|
          (deny)
        )\s+
        ({{protocol_target}})
        (?:
          (?:
            (?:\s+(?:({{network_target}})|(?:(host)\s+({{ip}}))))
            (?:\s+({{operators}})\s+({{port_target}}))?
            (\s+established)?
            (?:\s+(?:({{network_target}})|(?:(host)\s+({{ip}}))))
            (?:\s+({{operators}})\s+({{port_target}}))?
            (\s+established)?
          )
        )
      captures:
        1: support.constant             # access-list
        2: constant.numeric             # access-list number
        3: entity.other.attribute-name  # permit
        4: keyword.other                # deny
        5: constant.numeric             # protocol name
        6: constant.numeric             # Source Network
        7: support.constant             # Source Host
        8: constant.numeric             # Source Host IP
        9: support.constant             # Source Operator
        10: constant.numeric             # Source Port
        11: support.constant            # Source Established
        12: constant.numeric.target_ip  # Destination Network
        13: support.constant            # Destination Host
        14: constant.numeric            # Destination Host IP
        15: support.constant            # Destination Operator
        16: constant.numeric            # Destination Port
        17: support.constant            # Destination Established
        18: ios.acl.ace.target_ip       # IP target scope

  extended_acl:
    - match: ^\s*(ip)\s+(access-list)\s+(extended)\s+(\S+)
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: support.constant
        4: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.acl.extended
        - include: remark_ace
        - include: extended_ace
        - include: pop_on_configure_terminal_context

  remark_ace:
    - match: |
        (?xi)
        ^\s*
        ({{line_number}}\s+)?
        (remark)\s+
        (.*)
      scope: text.network.cisco.acl.extended.ace.remark
      captures:
        1: constant.numeric             # Line number
        2: comment.line                 # remark
        3: comment.line                 # remark text

  extended_ace:
    - match: |
        (?xi)
        ^\s*
        ({{line_number}}\s+)?
        (?:(permit)|(deny))\s+
        ({{protocol_target}})
        (?:
          (?:
            (?:\s+(?:({{network_target}})|(?:(host)\s+({{ip}}))))
            (?:\s+({{operators}})\s+({{port_target}}))?
            (\s+established)?
            (?:\s+(?:({{network_target}})|(?:(host)\s+({{ip}}))))
            (?:\s+({{operators}})\s+({{port_target}}))?
            (\s+established)?
          )
        )
      scope: text.network.cisco.acl.extended.ace
      captures:
        1: constant.numeric             # Line number
        2: entity.other.attribute-name  # Permit
        3: keyword.other                # Deny
        4: support.constant             # Protocol Name
        5: constant.numeric             # Source Network
        6: support.constant             # Source Host
        7: constant.numeric             # Source Host IP
        8: support.constant             # Source Operator
        9: constant.numeric             # Source Port
        10: support.constant            # Source Established
        11: constant.numeric.target_ip  # Destination Network
        12: support.constant            # Destination Host
        13: constant.numeric            # Destination Host IP
        14: support.constant            # Destination Operator
        15: constant.numeric            # Destination Port
        16: support.constant            # Destination Established
        17: ios.acl.ace.target_ip       # IP target scope

  route_map:
    - match: '^\s*(route-map)\s+(\S+)\s+(?:(permit)|(deny))\s+(\d+)?'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
        3: entity.other.attribute-name
        4: keyword.other
        5: constant.numeric
      push:
      - meta_content_scope: text.network.cisco.route_map
      - match: >
          (?xi)
          (?:(match\s+ip\s+address\s+prefix-list)\s+(\S+))|
          (?:(match\s+ip\s+address)\s+(\S+))|
          (?:(set\s+extcommunity\s+rt)\s+({{route_target}})(\s+additive)?)|
          (?:(set\s+local-preference)\s+(\d+)?)
        captures:
          1: support.constant   # match address prefix-list 
          2: string.unquoted    # match address prefix-list name 
          3: support.constant   # match address 
          4: string.unquoted    # match address name 
          5: support.constant   # set extcommunity rt
          6: constant.numeric   # set extcommunity rt route_target
          7: support.constant    # set extcommunity rt route_target additive
          8: support.constant   # set local-preference
          9: constant.numeric   # set local-preference number
      - include: pop_on_configure_terminal_context

  aaa_authentication:
    - match: |
        (?xi)
        ^\s*
        (?:(aaa\s+authentication)\s+)
        (?:
          (?:
            (login)\s+
            (?:
              (?:(default)|(\S+))
            )
          )
        )
      scope: text.network.cisco.aaa.authentication
      captures:
        1: support.constant             # aaa authentication
        2: support.constant             # login
        3: support.constant             # default
        4: string.unquoted              # group name
      push:
        - match: |
            (?xi)
            (?:
              (?:
                \s+
                (
                  (?:cache)|
                  (?:group)
                )
                \s+(\S+)
              )?
              (
                (
                  \s+
                  (?:
                    (?:{{authentication_methods}})|
                    (?:enable)|
                    (?:group\s+ldap)|
                    (?:group\s+radius)|
                    (?:group\s+tacacs\+)|
                    (?:krb5-telnet)|
                    (?:krb5)|
                    (?:line)|
                    (?:local-case)|
                    (?:local)|
                    (?:none)|
                    (?:passwd-expiry)
                  )
                )+
              )
            )
          pop: true
          captures:
            1: support.constant             # method group type
            2: string.unquoted              # method group name
            3: entity.other.attribute-name  # method

  aaa_group:
    - match: |
        (?xi)
        ^\s*
        (aaa)\s+(group)\s+(server)\s+
        (
          (?:radius)
        )
        \s+(\S+)
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: support.constant
        4: entity.other.attribute-name
        5: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.ios.aaa_group
        - include: aaa_group_settings
        - include: pop_on_configure_terminal_context

  aaa_group_settings:
    - match: |
        (?xi)
        ^\s*
        (?:
          (?:
            (server)\s+({{ip}})
            (?:\s+(auth-port)\s+(\d+))?
            (?:\s+(acct-port)\s+(\d+))?
          )
        )
      captures:
        1: support.constant
        2: constant.numeric
        3: support.constant
        4: constant.numeric
        5: support.constant
        6: constant.numeric

  class_map:
    - match: ^\s*(class-map)\s+(match-(?:(?:all)|(?:any)))\s+(\S+)
      captures:
        0: cisco.scope
        1: variable.parameter
        2: entity.other.attribute-name
        3: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.policy_map
        - include: class_map_settings
        - include: pop_on_configure_terminal_context

  class_map_settings:
    - match: |
        (?xi)
        (?:
          (?:(match\s+ip\s+dscp)\s+({{dscp}}))|
          (?:(match\s+access-group)\s+(\d+))
        )
      captures:
        1: support.constant              # match ip dscp
        2: constant.numeric              # match ip dscp value
        3: support.constant              # bandwidth percent
        4: constant.numeric              # match access-group
        5: support.constant              # match access-group id

  policy_map:
    - match: ^\s*(policy-map)\s+(\S+)
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.policy_map
        - include: policy_class_map
        - include: pop_on_configure_terminal_context

  policy_class_map:
    - match: ^\s*(class)\s+(\S+)
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.policy_map.policy_class_map
        - include: policy_class_map_settings
        - include: pop_on_policy_map_context

  policy_class_map_settings:
    - match: |
        (?xi)
        (?:
          (?:(priority)\s+(\d+))|
          (?:(bandwidth)\s+(percent)\s+
            (
              (?:1\d{2})|
              (?:\d{2})|
              (?:\d)
            )
          )|
          (?:(police)\s+(cir)\s+(\d+))|
          (?:
            (
              (?:conform-action)|
              (?:exceed-action)|
              (?:violate-action)
            )
            \s+
            (?:
              (transmit)|
              (drop)
            )
          )|
          (?:
            (shape)\s+
            (?:
              (?:(average)\s+(\d+))
            )
          )|
          (?:(service-policy)\s+(\S+))
        )
      captures:
        1: support.constant              # priority
        2: constant.numeric              # priority value
        3: support.constant              # bandwidth
        4: support.constant              # bandwidth percent
        5: constant.numeric              # bandwidth percent value
        6: support.constant              # police
        7: support.constant              # police cir
        8: constant.numeric              # police cir value
        9: support.constant              # action-type
        10: entity.other.attribute-name  # action-type transmit
        11: keyword.other                # action-type drop
        12: support.constant              # shape
        13: support.constant              # shape average
        14: constant.numeric              # shape average value
        15: support.constant              # service-policy
        16: string.unquoted              # service-policy name

  ospf:
    - match: ^\s*(router)\s+(ospf)\s+(\d+)
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: constant.language
      push:
        - meta_content_scope: text.network.cisco.ospf
        - include: ospf_settings
        - include: pop_on_configure_terminal_context

  ospf_settings:
    - match: |
        (?xi)
        ^\s*
        (?:
          (?:(log-adjacency-changes))|
          (?:(auto-cost\s+reference-bandwidth)\s+(\d+))|
          (?:
            (area)\s+(\d+)\s+
            (?:
              (?:(authentication)\s+(message-digest))|
              (?:(nssa))
            )
          )|
          (?:(passive-interface)\s+({{interface_names}})\s*({{interface_numbers}}))|
          (?:(network)\s+({{ip}})\s+({{wildcard_mask}})\s+(area)\s+(\d+))
        )
      captures:
        1: support.constant              # log-adjacency-changes
        2: support.constant              # auto-cost reference-bandwidth
        3: constant.numeric              # auto-cost reference-bandwidth value
        4: support.constant              # area
        5: constant.numeric              # area id
        6: support.constant              # area authentication
        7: support.constant              # area authentication message-digest
        8: support.constant              # area nssa
        9: support.constant              # passive-interface
        10: entity.other.attribute-name  # passive-interface type
        11: constant.numeric             # passive-interface type number
        12: support.constant              # network
        13: constant.numeric              # network ip
        14: constant.numeric              # network ip wildcard
        15: support.constant              # network ip wildcard area
        16: constant.numeric              # network ip wildcard area id


  bgp:
    - match: ^\s*(router)\s+(bgp)\s+(\d+)
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: constant.language
      push:
        - meta_content_scope: text.network.cisco.bgp
        - include: ipv4_network
        - include: ipv6_network
        - include: ipv4_neighbor
        - include: ipv6_neighbor
        - include: ipv6_address_family
        - include: ipv4_address_family
        - include: vpnv4_address_family
        - include: bgp_settings
        - include: pop_on_configure_terminal_context

  vpnv4_address_family:
    - match: ^\s*(address-family)\s+(vpnv4)
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: support.constant
        4: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.bgp.ipv4.address_family
        - match: '({{pop_address_family_ctx}})'
          pop: true
          captures:
            1: comment.line
        - include: ipv4_network
        - include: ipv4_neighbor
        - include: pop_on_bgp_address_family_context

  ipv4_address_family:
    - match: ^\s*(address-family)\s+(ipv4)(?:\s+(vrf)\s+(\S+))?
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: support.constant
        4: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.bgp.ipv4.address_family
        - match: '({{pop_address_family_ctx}})'
          pop: true
          captures:
            1: comment.line
        - include: ipv4_network
        - include: ipv4_neighbor
        - include: pop_on_bgp_address_family_context

  ipv6_address_family:
    - match: ^\s*(address-family)\s+(ipv6)\s+(vrf)\s+(\S+)\s*(\s+\S.*)?$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: support.constant
        4: string.unquoted
        5: invalid.illegal
      push:
        - meta_content_scope: text.network.cisco.bgp.ipv6.address_family
        - match: '({{pop_address_family_ctx}})'
          pop: true
          captures:
            1: comment.line
        - include: ipv6_network
        - include: ipv6_neighbor
        - include: pop_on_bgp_address_family_context
        # - include: pop_context_on_unknown


  ipv4_neighbor:
    - match: |
        (?xi)
        ^\s*(neighbor)\s+({{ip}})\s+
        (?:
        (activate)|
        (shutdown)|
        (next-hop-self)|
        (?:(soft-reconfiguration)\s+(inbound|outbound))|
        (?:(password)\s+(\d+)\s+(\S+))|
        (?:(prefix-list|route-map)\s+(\S+)\s+(in|out))|
        (?:(inherit)\s+(peer-policy)\s+(\S+))|
        (send-community(?:\s+(?:(?:both)|(?:extended)))?)|
        (?:(remote-as)\s+(\d+)(\s+shutdown)?)|
        (?:(timers)\s+(\d+)\s+(\d+)(?:\s+(\d+))?)|
        (?:(ttl-security)\s+(hops)\s+(\d+))|
        (?:(description)\s+(.*))|
        (?:(version)\s+(\d+))|
        (?:(transport)\s+(path-mtu-discovery))|
        (?:(ebgp-multihop)\s+(\d+))|
        (?:(update-source)\s+(?:({{interface_names}})\s*({{interface_numbers}})))
        )
      captures:
        1: support.constant               # Neighbor
        2: constant.numeric               # IP
        3: entity.other.attribute-name    # Active
        4: keyword.other                  # Shutdown
        5: support.constant               # Next-hop-self
        6: support.constant               # Soft reconfiguration inbound
        7: support.constant               # Soft reconfiguration inbound
        8: support.constant               # Password
        9: constant.numeric               # Password
        10: string.unquoted               # Password
        11: support.constant              # Prefix list
        12: string.unquoted               # Prefix list
        13: support.constant              # Prefix list
        14: support.constant              # Inherit peer policy
        15: support.constant              # Inherit peer policy
        16: string.unquoted               # Inherit peer policy
        17: support.constant              # Send community
        18: support.constant              # Remote AS
        19: constant.numeric              # Remote AS #
        20: keyword.other                 # Remote AS shutdown
        21: support.constant              # Timers
        22: constant.numeric              # Timers
        23: constant.numeric              # Timers
        24: constant.numeric              # Timers
        25: support.constant              # TTL security hops
        26: support.constant              # TTL security hops
        27: constant.numeric              # TTL security hops
        28: support.constant              # Description
        29: comment.block.documentation   # Description
        30: support.constant              # Version
        31: constant.numeric              # Version
        32: support.constant              # Path MTU discovery
        33: support.constant              # Path MTU discovery
        34: support.constant              # ebgp multihop
        35: constant.numeric              # ebgp multihop hops
        36: support.constant              # update-source
        37: entity.other.attribute-name    # update-source interface_type
        38: constant.numeric              # update-source interface_number

  ipv4_network:
    - match: '^\s+(network)\s+({{ip}})(?:\s+(mask)\s+({{subnet_mask}}))?'
      captures:
        1: support.constant
        2: constant.numeric
        3: support.constant
        4: constant.numeric

  bgp_settings:
    - match: |
        (?xi)
        ^\s*
        (?:
          (?:(timers\s+bgp)\s+(\d+)\s+(\d+)(?:\s+(\d+))?)|
          (?:
            (bgp)\s+
            (?:
              (?:(router-id)\s+(\S+))|
              (?:(log-neighbor-changes))
            )
          )
        )
      captures:
        1: support.constant              # Timers
        2: constant.numeric              # Timers
        3: constant.numeric              # Timers
        4: constant.numeric              # Timers
        5: support.constant              # bgp
        6: support.constant              # bgp router-id
        7: constant.numeric              # bgp router-id id
        8: support.constant              # bgp log-neighbor-changes


  ipv6_neighbor:
    - match: |
        (?xi)
        ^\s*(neighbor)\s+({{ipv6}})\s+
        (?:
          (activate)|
          (shutdown)|
          (next-hop-self)|
          (?:(soft-reconfiguration)\s+(inbound|outbound))|
          (?:(password)\s+(\d+)\s+(\S+))|
          (?:(prefix-list|route-map)\s+(\S+)\s+(in|out))|
          (?:(inherit)\s+(peer-policy)\s+(\S+))|
          (send-community(?:\s+(?:(?:both)|(?:extended)))?)|
          (?:(remote-as)\s+(\d+)(\s+shutdown)?)|
          (?:(timers)\s+(\d+)\s+(\d+)(?:\s+(\d+))?)|
          (?:(ttl-security)\s+(hops)\s+(\d+))|
          (?:(description)\s+(.*))|
          (?:(version)\s+(\d+))|
          (?:(transport)\s+(path-mtu-discovery))
        )
      captures:
        1: support.constant               # Neighbor
        2: constant.numeric               # IP
        3: entity.other.attribute-name    # Active
        4: keyword.other                  # Shutdown
        5: support.constant               # Next-hop-self
        6: support.constant               # Soft reconfiguration inbound
        7: support.constant               # Soft reconfiguration inbound
        8: support.constant               # Password
        9: constant.numeric               # Password
        10: string.unquoted               # Password
        11: support.constant              # Prefix list
        12: string.unquoted               # Prefix list
        13: support.constant              # Prefix list
        14: support.constant              # Inherit peer policy
        15: support.constant              # Inherit peer policy
        16: string.unquoted               # Inherit peer policy
        17: support.constant              # Send community
        18: support.constant              # Remote AS
        19: constant.numeric              # Remote AS
        20: keyword.other                 # Remote AS shutdown
        21: support.constant              # Timers
        22: constant.numeric              # Timers
        23: constant.numeric              # Timers
        24: constant.numeric              # Timers
        25: support.constant              # TTL security hops
        26: support.constant              # TTL security hops
        27: constant.numeric              # TTL security hops
        28: support.constant              # Description
        29: comment.block.documentation   # Description
        30: support.constant              # Version
        31: constant.numeric              # Version
        32: support.constant              # Path MTU discovery
        33: support.constant              # Path MTU discovery

  ipv6_network:
    - match: '^\s*(network)\s+({{ipv6_prefix}})?'
      captures:
        1: support.constant
        2: constant.numeric

  ipv6_unicast_routing:
  - match: ^\s*(ipv6\s+unicast-routing)
    captures:
      1: support.constant

  ip_classless:
  - match: ^\s*(ip\s+classless)
    captures:
      1: support.constant

  ntp:
  - match: |
      (?xi)
        ^\s*
        (ntp)\s+
        (?:
          (?:(source)\s+({{interface_names}})\s*({{interface_numbers}}))|
          (?:(clock-period)\s+(\d+))|
          (?:(server)\s+({{ip}}))
        )      
    captures:
      1: support.constant               # ntp
      2: support.constant               # ntp source
      3: entity.other.attribute-name    # ntp source interface type
      4: constant.numeric               # ntp source interface number
      5: support.constant               # ntp clock-period
      6: constant.numeric               # ntp clock-period value
      7: support.constant               # ntp server
      8: constant.numeric               # ntp server ip

  ip_http:
  - match: ^\s*(ip\s+http\s+server)
    captures:
      1: support.constant

  ip_route:
    - include: ipv4_route
    - include: ipv6_route

  ipv4_route:
    - match: |
        (?xi)
        ^\s*
        (?:
          (ip)\s+(route)\s+
          (?:(vrf)\s+(\S+)\s+)?
          ({{ip}})\s+
          ({{subnet_mask}})
          (?:
            \s+
            (?:
              (?:(Null)\s*(\d+))|
              (?:({{interface_names}})\s*({{interface_numbers}}))
            )
          )?
          (?:
            \s+
            ({{ip}})
            (?:
              (?:\s+(name)\s+(\S+))?
              (?:\s+(permanent))?
              (?:\s+(track)\s+(\S+))?
              (?:\s+(tag)\s+(\S+))?
            )?
          )?
        )
      captures:
        1: support.constant             # ip
        2: support.constant             # route
        3: support.constant             # vrf
        4: string.unquoted              # vrf name
        5: constant.numeric             # ip
        6: constant.numeric             # subnet mask
        7: entity.other.attribute-name  # next hop interface
        8: constant.numeric             # next hop interface id
        9: entity.other.attribute-name  # next hop null
        10: constant.numeric             # next hop null id
        11: constant.numeric             # next hop ip
        12: support.constant            # name
        13: string.unquoted             # name
        14: support.constant            # perminate
        15: support.constant            # track
        16: constant.numeric            # track id
        17: support.constant            # tag
        18: constant.numeric            # tag id

  ipv6_route:
    - match: |
        (?xi)
        ^\s*
        (ipv6)\s+(route)\s+
        (?:(vrf)\s+(\S+)\s+)?
        ({{ipv6_prefix}})
        \s+
        (?:
          (?:
            (?:(Null)\s*(\d+))|
            (?:({{interface_names}})\s*({{interface_numbers}}))
          )
          \s+
        )?
        ({{ipv6}})
        (?:
          \s+
          (?:\s+(name)\s+(\S+))?
          (?:\s+(permanent))?
          (?:\s+(track)\s+(\S+))?
          (?:\s+(tag)\s+(\S+))?
        )?
      captures:
        1: support.constant             # ip
        2: support.constant             # route
        3: support.constant             # vrf
        4: string.unquoted              # vrf name
        5: constant.numeric             # ip
        6: entity.other.attribute-name  # next hop null
        7: constant.numeric             # next hop null id
        8: entity.other.attribute-name  # next hop interface
        9: constant.numeric             # next hop interface id
        10: constant.numeric             # next hop ip
        11: support.constant             # name
        12: string.unquoted             # name
        13: support.constant            # perminate
        14: support.constant            # track
        15: constant.numeric            # track id
        16: support.constant            # tag
        17: constant.numeric            # tag id

  prefix_list:
    - include: ipv4_prefix_list
    - include: ipv6_prefix_list

  ipv4_prefix_list:
    - match: |
        (?xi)
        ^\s*(ip)\s+(prefix-list)\s+(\S+)\s+
        (?:(seq)\s+(\d+)\s+)?
        (?:(permit)|(deny))\s+
        ({{ip_prefix}})
        (?:
          \s+({{operators}})\s+({{ipv4_prefix_length}})
          (?:\s+({{operators}})\s+({{ipv4_prefix_length}}))?
        )?
      captures:
        1: support.constant               # IP
        2: support.constant               # Prefix list
        3: string.unquoted                # Name
        4: support.constant               # sequence
        5: constant.numeric               # sequence number
        6: entity.other.attribute-name    # permit
        7: keyword.other                  # deny
        8: constant.numeric               # prefix
        9: support.constant               # operator
        10: constant.numeric              # prefix
        11: support.constant              # operator
        12: constant.numeric              # prefix

  ipv6_prefix_list:
    - match: |
        (?xi)
        ^\s*(ipv6)\s+(prefix-list)\s+(\S+)\s+
        (?:(seq)\s+(\d+)\s+)?
        (?:(permit)|(deny))\s+
        ({{ipv6_prefix}})
        (?:
          \s+({{operators}})\s+({{ipv6_prefix_length}})
          (?:\s+({{operators}})\s+({{ipv6_prefix_length}}))?
        )?
      captures:
        1: support.constant               # IP
        2: support.constant               # Prefix list
        3: string.unquoted                # Name
        4: support.constant               # sequence
        5: constant.numeric               # sequence number
        6: entity.other.attribute-name    # permit
        7: keyword.other                  # deny
        8: constant.numeric               # prefix
        9: support.constant               # operator
        10: constant.numeric              # prefix
        11: support.constant              # operator
        12: constant.numeric              # prefix

  service:
    - match: |
        (?xi)
        (service)\s+
        (?:
          (?:(password-encryption))|
          (?:(nagle))|
          (?:(sequence-numbers))|
          (?:(tcp-keepalives-in))|
          (?:(tcp-keepalives-out))|
          (?:(timestamps)\s+
            (
              (?:debug)|
              (?:log)|
            )
            \s+
            (datetime\s+msec)
            (?:\s+(localtime\s+show-timezone))?
          )
        )
      captures:
        1: support.constant               # service
        2: support.constant               # password-encryption
        3: support.constant               # nagle
        4: support.constant               # sequence-numbers
        5: support.constant               # tcp-keepalives-in
        6: support.constant               # tcp-keepalives-out
        7: support.constant               # timestamps
        8: support.constant               # timestamps debug | log
        9: support.constant               # timestamps datetime msec
        10: support.constant               # timestamps localtime show-timezone

  vlan:
    - match: '^\s*(vlan)\s+({{vlan_id}})'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.numeric
      push:
      - meta_content_scope: text.network.cisco.vlan
      - match: ^\s*(name)\s+(\S+)
        captures:
          1: support.constant
          2: string.unquoted
      # - include: pop_context_on_unknown

  interface:
    - include: interface_default
    - include: interface_block

  interface_block:
    - match: >
        (?xi)
        ^\s*
        (?:
          (interface)\s+
          (?:
            (?:(range)\s+({{interface_names}})\s*({{interface_number_ranged}}))|
            ({{interface_names}})\s*({{interface_numbers}})
          )
        )
      captures:
        0: cisco.scope.interface
        1: variable.parameter               # interface
        2: support.constant               # range
        3: entity.other.attribute-name    # interface name
        4: constant.numeric               # interface number
        5: entity.other.attribute-name    # interface name
        6: constant.numeric               # interface number
      push:
      - meta_content_scope: text.network.cisco.interface
      - include: standby
      - include: switchport
      - match: |
          (?xi)
          ^\s*
          (?:
            (?:(description.*))|
            (?:((?:ip\s+)?vrf\s+forwarding)\s+(\S*))|
            (port-channel\s+standalone-disable)|
            (?:(encapsulation\s+dot1q)\s+({{vlan_id}}))|
            (?:(ip\s+helper-address)\s+({{ip}}))|
            (?:(ip\s+access-group)\s+(\S+)\s+(in|out))|
            (?:(ip\s+proxy-arp))|
            (?:(ip(?:v6)?\s+redirects))|
            (?:(ipv6\s+address\s+general-prefix)\s+({{ipv6_prefix}}))(\s+eui-64)?|
            (?:(ipv6\s+nd\s+prefix)\s+({{ipv6_prefix}}))|
            (?:(ip\s+address)\s+({{ip}})\s+({{subnet_mask}})(\s+secondary)?)|
            (shutdown)|
            (ipv6\s+enable)|
            (?:(channel-group)\s+(\d+)\s+(mode)\s+(active|on))|
            (?:(speed)\s+(auto)|(\d+))|
            (?:(ip\s+nat)\s+((?:inside)|(?:outside)))|
            (?:(duplex)\s+((?:auto)|(?:half)|(?:auto)))|
            (?:
              (ip)\s+
              (?:
                (flow\s+ingress)|
                (?:(igmp\s+query-interval)\s+(\d+))
              )
            )|
            (?:(mtu)\s+(\d+))|
            (?:(bandwidth)\s+(\d+))|
            (?:(speed)\s+(\d+))|
            (?:(full-duplex))|
            (?:(half-duplex))|
            (?:(ip\s+pim)\s+((?:(?:sparse)|(?:dense))-mode))|
            (?:(ip\s+ospf)\s+
              (?:
                (?:(message-digest-key)\s+(\d+)\s+({{hashing_algorithms}})\s+(\d+)\s+(\S+))|
                (?:(cost)\s+(\d+))
              )
            )|
            (?:
              (spanning-tree)\s+
              (?:
                (portfast)(\s+edge)?
              )|(?:
                (bpduguard)\s+(?:(enable)|(disable))
              )
            )|
            (?:
              (service-policy)\s+
              (
                (?:input)|
                (?:output)
              )
              \s+(\S+)
            )
          )
        captures:
          1: comment.line                 # Description
          2: support.constant             # ip vrf forwarding
          3: string.unquoted              # vrf name
          4: support.constant             # port-channel standalone-disable
          5: support.constant             # encapsulation dot1q
          6: constant.numeric             # dot1q id
          7: support.constant             # ip helper-address
          8: constant.numeric             # dhcp-ip
          9: support.constant             # ip access-group
          10: string.unquoted             # acl name
          11: support.constant            # in / out
          12: support.constant            # proxy-arp
          13: support.constant            # ip redirects
          14: support.constant            # ipv6 address general-prefix
          15: constant.numeric            # ipv6 prefix
          16: support.constant            # eui-64
          17: support.constant            # ipv6 nd prefix
          18: support.constant            # ipv6 nd prefix
          19: support.constant            # ip address
          20: constant.numeric            # ip address ipv4 address
          21: constant.numeric            # ip address ipv4 subnet mask
          22: support.constant.secondary  # ip address secondary
          23: keyword.other               # shutdown
          24: support.constant            # ipv6 enable
          25: support.constant            # channel-group
          26: constant.numeric            # channel-group id
          27: support.constant            # channel-group mode
          28: support.constant            # channel-group mode active
          29: support.constant            # speed
          30: support.constant            # speed auto
          31: constant.numeric            # speed #
          32: support.constant            # ip nat
          33: support.constant            # ip nat inside / outside
          34: support.constant            # duplex
          35: support.constant            # duplex auto / full / half
          36: support.constant            # ip
          37: support.constant            # ip flow ingress
          38: support.constant            # ip igmp query-interval
          39: constant.numeric            # ip igmp query-interval value
          40: support.constant            # mtu
          41: constant.numeric            # mtu value
          42: support.constant            # bandwidth
          43: constant.numeric            # bandwidth value
          44: support.constant            # speed
          45: constant.numeric            # speed value
          46: support.constant            # full-duplex
          47: support.constant            # half-duplex
          48: support.constant            # ip pim
          49: entity.other.attribute-name # ip pim mode
          50: support.constant            # ip ospf
          51: support.constant            # ip ospf message-digest-key
          52: constant.numeric            # ip ospf message-digest-key id
          53: entity.other.attribute-name # ip ospf message-digest-key hash
          54: constant.numeric            # ip ospf message-digest-key password type
          55: string.unquoted             # ip ospf message-digest-key password
          56: support.constant            # ip ospf cost
          57: constant.numeric            # ip ospf cost value
          58: support.constant            # spanning-tree
          59: support.constant            # spanning-tree portfast
          60: support.constant            # spanning-tree portfast edge
          61: support.constant            # spanning-tree bpduguard
          62: entity.other.attribute-name # spanning-tree bpduguard enable
          63: keyword.other               # spanning-tree bpduguard disable
          64: support.constant            # service-policy
          65: support.constant            # service-policy input/output
          66: string.unquoted             # service-policy input/output name
      - include: pop_on_configure_terminal_context
      - include: partials

  standby:
    - match: |
        (?xi)
        ^\s*
        (?:
          (standby)\s+(?:(\d+)|(?:(version)\s+([1-2])))\s+
          (?:
            (?:(ip)\s+({{ip}}))|
            (?:(preempt)(?:\s+(delay\s+minimum)\s+(\d+)(?:\s+(reload)\s+(\d+))?)?)|
            (?:(track)\s+(\d+)\s+(decrement)\s+(\d+))|
            (?:(priority)\s+(\d+))|
            (?:(ipv6)\s+(?:
               (?:(autoconfig))|
               (?:({{ipv6}}))
              )
            )
          )?
        )
      captures:
        1: support.constant       # standby
        2: constant.numeric       # standby id
        3: support.constant       # version
        4: constant.numeric       # version number
        5: support.constant       # ip
        6: constant.numeric       # ip address
        7: support.constant       # preempt
        8: support.constant       # delay minimum
        9: constant.numeric       # delay time
        10: support.constant       # reload
        11: constant.numeric       # reload time
        12: support.constant       # track
        13: constant.numeric       # track number
        14: support.constant       # track decrement
        15: constant.numeric       # track decrement number
        16: support.constant       # priority
        17: constant.numeric       # priority number
        18: support.constant       # ipv6
        19: support.constant       # ipv6 autoconfig
        20: constant.numeric       # ipv6 ip

  switchport:
    - match: '^\s*(switchport\s+mode\s+(?:trunk|access|capture))'
      captures:
        1: support.constant
    - include: switchport_trunk
    - include: switchport_access
    - include: switchport_voice
    - match: '^\s*(switchport)'
      captures:
        1: support.constant

  switchport_voice:
    - match: ^\s*(switchport\s+voice\s+vlan)\s+({{vlan_id}})
      captures:
        1: support.constant
        2: constant.numeric

  switchport_access:
    - match: ^\s*(switchport\s+access\s+vlan)\s+({{vlan_id}})
      captures:
        1: support.constant
        2: constant.numeric

  switchport_trunk:
    - match: |
        (?xi)
        ^\s*
        (?:
          (switchport\s+trunk)\s+
          (?:
            (encapsulation\s+dot1q)|
            (allowed\s+vlan)\s+
            (?:(?:(add)|(remove))\s+)?({{vlan_range}})
          )
        )
      captures:
        1: support.constant               # switchport trunk
        2: support.constant               # mode trunk
        3: support.constant               # encapsulation dot1q
        4: entity.other.attribute-name    # add
        5: keyword.other                  # remove
        6: constant.numeric               # vlan


  interface_default:
    - match: |
        (?xi)
        ^\s*
        (?:
          (default)\s+
          (interface)\s+
          ({{interface_names}})\s*
          ({{interface_numbers}})
        )
      captures:
        1: support.constant               # default
        2: support.constant               # interface
        3: entity.other.attribute-name    # interface name
        4: constant.numeric               # interface number

  vty:
    - match: '^\s*(line)\s+(vty)\s+(\d+)\s+(\d+)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: constant.numeric
        4: constant.numeric
      push:
      - meta_content_scope: text.network.cisco.vty
      - include: line_settings
      - include: pop_on_configure_terminal_context

  line_settings:
    - match: |
        (?xi)
        ^\s*
        (?:
          (?:
            (transport)\s+
            (
              (?:preferred)|
              (?:input)|
              (?:output)
            )
            (
              (?:
                \s+
                (?:
                  (?:ssh)|
                  (?:telnet)|
                  (?:all)
                )
              )+
            )
          )|
          (?:(password)\s+(\S+))|
          (?:(access-class)\s+(?:(\d+)|(\S+))\s+(in)(?:\s+(vrf-also))?)|
          (?:(modem\s+enable))|
          (?:(exec-timeout)\s+(\d+)\s+(\d+))|
          (logging\s+synchronous)|
          (?:(stopbits)\s+(\d+))
        )
      captures:
        1: support.constant                 # transport
        2: support.constant                 # transport preferred|input|output
        3: constant.numeric                 # transport protocol
        4: support.constant
        5: string.unquoted
        6: support.constant
        7: constant.numeric
        8: string.unquoted
        9: support.constant
        10: support.constant
        11: support.constant
        12: support.constant
        13: constant.numeric
        14: constant.numeric
        15: support.constant
        16: support.constant                # stopbits
        17: constant.numeric                # stopbits value

  line_con:
    - match: '^\s*(line)\s+(con)\s+(0)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: constant.numeric
      push:
      - meta_content_scope: text.network.cisco.ios.console
      - include: line_settings
      - include: pop_on_configure_terminal_context

  line_aux:
    - match: '^\s*(line)\s+(aux)\s+(\d+)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: constant.numeric
      push:
      - meta_content_scope: text.network.cisco.ios.aux
      - include: line_settings
      - include: pop_on_configure_terminal_context

  ip_dhcp_pool:
    - match: |
        (?xi)
        ^\s*
        (ip)\s+(dhcp)\s+(pool)\s+(\S+)
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: support.constant
        4: string.unquoted
      push:
      - meta_content_scope: text.network.cisco.ios.ip_dhcp_pool
      - include: ip_dhcp_pool_settings
      - include: pop_on_configure_terminal_context

  ip_dhcp_pool_settings:
    - match: |
        (?xi)
        ^\s*
        (?:
          (?:(network)\s+({{ip}}\s+{{subnet_mask}}))|
          (?:(default-router)\s+({{ip}}))
        )
      captures:
        1: support.constant
        2: constant.numeric
        3: support.constant
        4: constant.numeric

  vrf:
    - include: new_vrf_syntax
    - include: old_vrf_syntax

  old_vrf_syntax:
    - match: '^\s*(ip)\s+(vrf)\s+(\S+)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: string.unquoted
      push:
      - meta_content_scope: text.network.cisco.vrf
      - include: vrf_address_family
      - include: vrf_settings
      - include: pop_on_configure_terminal_context

  new_vrf_syntax:
    - match: '^\s*(vrf)\s+(definition)\s+(\S+)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: string.unquoted
      push:
      - meta_content_scope: text.network.cisco.vrf
      - include: vrf_address_family
      - include: vrf_settings
      - include: pop_on_configure_terminal_context

  vrf_settings:
      - match: |
          (?xi)
          ^\s*
          (?:
            (?:(description.*))|
            (?:(rd)\s+([0-9\.:]+))|
            (?:(route-target)\s+(import|export|both)\s+([0-9\.:]+))
          )
        captures:
          1: comment.line                   # description
          2: support.constant               # rd
          3: constant.numeric               # rd id
          4: support.constant               # route-target
          5: entity.other.attribute-name    # route-target import/export/both
          6: constant.numeric               # route-target id


  vrf_address_family:
    - include: vrf_ipv4_address_family
    - include: vrf_ipv6_address_family

  vrf_ipv4_address_family:
    - match: '^\s*(address-family)\s+(ipv4)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
      push:
      - meta_content_scope: text.network.cisco.vrf.ipv4_address_family
      - match: '({{pop_address_family_ctx}})'
        pop: true
        captures:
          1: comment.line
      - match: >
          (?xi)
          \s*
          (?:(export\s+map)\s+(\S+))
        captures:
          1: support.constant        # export map
          2: string.unquoted         # export map name
      - include: pop_on_vrf_definition_context

  vrf_ipv6_address_family:
    - match: '^\s*(address-family)\s+(ipv6)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
      push:
      - meta_content_scope: text.network.cisco.vrf.ipv6_address_family
      - match: '({{pop_address_family_ctx}})'
        pop: true
        captures:
          1: comment.line
      - match: >
          (?xi)
          ^\s*
          (?:
            (?:(export\s+map)\s+(\S+))
          )
        captures:
          1: support.constant        # export map
          2: string.unquoted         # export map name
      - include: pop_on_vrf_definition_context

  do_show:
    - match: '^\s*(do)(?=\s)'
      captures:
          1: support.constant
      push:
        - match: '$'
          pop: true
        - include: show

  show:
    - include: show_vlan
    - include: show_interface
    - include: show_run_interface
    - include: show_bgp
    - include: show_standby
    - include: show_ip_interface_brief
    - include: show_route

  show_vlan:
    - match: '\s*(show\s+vlan)(\s+(id)\s+({{vlan_id}}))?'
      captures:
        1: support.constant
        2: constant.numeric
        3: support.constant
        4: constant.numeric

  show_interface:
    - match: '\s*(show\s+interface)(?:(\s+{{interface_names}})\s*({{interface_numbers}}))?'
      captures:
        1: support.constant
        2: entity.other.attribute-name
        3: constant.numeric
        4: support.constant

  show_run_interface:
    - match: '\s*(show\s+run\s+interface)(?:(\s+{{interface_names}})\s*({{interface_numbers}}))?'
      captures:
        1: support.constant
        2: entity.other.attribute-name
        3: constant.numeric
        4: support.constant


  show_bgp:
    - match: |
        (?xi)
        (show\s+ip\s+bgp)
        (?:
          (?:
            (?:\s+(vpnv6)\s+
              (unicast)(?:
                (?:\s+(vrf)\s+(\S+)(?:\s+({{ipv6_prefix}}|{{ipv6}}))?)
              )?
            )|
            (?:\s+(vpnv4)\s+
              (unicast)(?:
                (?:\s+(vrf)\s+(\S+)(?:\s+({{ip_prefix}}|{{ip}}))?)
              )?
            )
          )
        )?
      captures:
        1: support.constant                 # show ip bgp
        2: support.constant                 # vpnv6
        3: support.constant                 # vpnv6 unicast
        4: support.constant                 # vpnv6 unicast vrf
        5: string.unquoted                  # vpnv6 unicast vrf name
        6: constant.numeric                 # vpnv6 unicast vrf name prefix
        7: support.constant                 # vpnv4
        8: support.constant                 # vpnv4 unicast
        9: support.constant                 # vpnv4 unicast vrf
        10: string.unquoted                 # vpnv4 unicast vrf name
        11: constant.numeric                # vpnv4 unicast vrf name prefix
        13: entity.other.attribute-name
        14: constant.numeric
        15: support.constant

  show_standby:
    - match: '\s*(show\s+standby)(?:\s+({{interface_names}})\s*({{interface_numbers}}))?(\s+brief)?'
      captures:
        1: support.constant
        2: entity.other.attribute-name
        3: constant.numeric
        4: support.constant

  show_ip_interface_brief:
    - match: '\s*(show\s+ip\s+interface\s+brief)(?:\s+({{interface_names}})\s*({{interface_numbers}}))?'
      captures:
        1: support.constant
        2: entity.other.attribute-name
        3: constant.numeric

  show_route:
    - match: |
        (?xi)
        \s*(show)\s+
        (?:
          (?:
            (ipv6\s+route)
            (?:\s+(vrf)\s+(\S+))?
            (\s+{{ipv6}})?
          )
          |
          (?:
            (ip\s+route)
            (?:\s+(vrf)\s+(\S+))?
            (\s+{{ip}})?
          )

        )
      captures:
        1: support.constant           # show
        2: support.constant           # ipv6 route
        3: support.constant           # ipv6 vrf
        4: string.unquoted            # ipv6 vrf name
        5: constant.numeric           # ipv6 prefix
        6: support.constant           # ip route
        7: support.constant           # ip vrf
        8: string.unquoted            # ip vrf name
        9: constant.numeric           # ip prefix

  locations:
    - include: location_local
    - include: location_remote

  location_remote:
    - match: ((?:t?ftp)|scp)(://)((?:\d+\.){3}\d+)(\/\S*)?
      captures:
        1: entity.other.attribute-name
        2: support.constant
        3: constant.language
        4: support.constant

  location_local:
    - match: ({{drives}}|(?:running|startup)-config)
      captures:
        1: support.constant

  write:
    - match: '^\s*(write)\s*'
      captures:
        1: support.constant

  logout:
    - match: '^\s*(logout)\s*'
      captures:
        1: support.constant

  copy:
    - match: '^\s*(copy)\s*'
      set: copy_location_source
      captures:
        1: support.constant

  copy_location_source:
    - match: \s
      set: copy_location_destination
    - include: locations

  copy_location_destination:
    - match: (?:\s|{{comment}}|$)
      pop: true
    - include: locations

  pipe:
    - match: (?<=\s)(\|)
      scope: text.network.cisco.pipe
      captures:
        1: keyword.other
      push:
        - meta_content_scope: text.network.cisco.pipe
        - match: '(?=(?:{{comment}})|$)'
          pop: true
        - match: >
            (?xi)
            \s+
            (?:
              (include)|
              (exclude)
            )
            \s+
            ([^{{comment}}]*)
          captures:
            1: entity.other.attribute-name
            2: keyword.other
            3: string.unquoted
  show_drives:
    - match: '\s*(show)\s+({{drives}})'
      captures:
        1: support.constant
        2: support.constant
