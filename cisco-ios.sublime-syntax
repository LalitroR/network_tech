%YAML 1.2
---
name: Cisco IOS
file-extensions: 
  - cisco-ios
  - ios
first_line_match: |
  (?xi)
    \s*
    [#!]
    .*
    (?:
      (?:router)|
      (?:ios)
    )
scope: text.network.cisco.ios


variables:
  comment: '(?:[!#])'
  pop_ctx: '^\s*exit\s*$'
  pop_address_family_ctx: '^\s*(?:exit-address-family)\s*$'
  command_end: '(?:\s|{{comment}}|$)'
  line_number: '^\s*\d+'
  ip: '(?:(?:(?:[0-2]?\d?\d)\.){3}(?:[0-2]?\d?\d))'
  wildcard_mask: |
    (?x)
    (?:
      (?:127\.255\.255\.255)|
      (?:63\.255\.255\.255)|
      (?:31\.255\.255\.255)|
      (?:15\.255\.255\.255)|
      (?:7\.255\.255\.255)|
      (?:3\.255\.255\.255)|
      (?:1\.255\.255\.255)|
      (?:0\.255\.255\.255)|
      (?:0\.127\.255\.255)|
      (?:0\.63\.255\.255)|
      (?:0\.31\.255\.255)|
      (?:0\.15\.255\.255)|
      (?:0\.7\.255\.255)|
      (?:0\.3\.255\.255)|
      (?:0\.1\.255\.255)|
      (?:0\.0\.255\.255)|
      (?:0\.0\.127\.255)|
      (?:0\.0\.63\.255)|
      (?:0\.0\.31\.255)|
      (?:0\.0\.15\.255)|
      (?:0\.0\.7\.255)|
      (?:0\.0\.3\.255)|
      (?:0\.0\.1\.255)|
      (?:0\.0\.0\.255)|
      (?:0\.0\.0\.127)|
      (?:0\.0\.0\.63)|
      (?:0\.0\.0\.31)|
      (?:0\.0\.0\.15)|
      (?:0\.0\.0\.7)|
      (?:0\.0\.0\.3)
    )
  subnet_mask: |
    (?x)
    (?:
        (?:128\.0\.0\.0)|
        (?:192\.0\.0\.0)|
        (?:224\.0\.0\.0)|
        (?:240\.0\.0\.0)|
        (?:248\.0\.0\.0)|
        (?:252\.0\.0\.0)|
        (?:254\.0\.0\.0)|
        (?:255\.0\.0\.0)|
        (?:255\.128\.0\.0)|
        (?:255\.192\.0\.0)|
        (?:255\.224\.0\.0)|
        (?:255\.240\.0\.0)|
        (?:255\.248\.0\.0)|
        (?:255\.252\.0\.0)|
        (?:255\.254\.0\.0)|
        (?:255\.255\.0\.0)|
        (?:255\.255\.128\.0)|
        (?:255\.255\.192\.0)|
        (?:255\.255\.224\.0)|
        (?:255\.255\.240\.0)|
        (?:255\.255\.248\.0)|
        (?:255\.255\.252\.0)|
        (?:255\.255\.254\.0)|
        (?:255\.255\.255\.0)|
        (?:255\.255\.255\.128)|
        (?:255\.255\.255\.192)|
        (?:255\.255\.255\.224)|
        (?:255\.255\.255\.240)|
        (?:255\.255\.255\.248)|
        (?:255\.255\.255\.252)|
        (?:255\.255\.255\.254)|
        (?:255\.255\.255\.255)
    )
  ipv4_prefix_length: '(?:(?:\d?\d)|(?:3[0-2]))'
  ip_prefix: '(?:{{ip}}/{{ipv4_prefix_length}})'
  ipv6_prefix_length: '(?:/1?\d?\d)'
  ipv6_prefix: '(?:(?:(?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(?:%.+)?{{ipv6_prefix_length}}|::/0))'
  ipv6: '(?:(?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(?:%.+)?)'
  vlan_id: '(?:(?:\d{2,3})|(?:[0-3]\d{2,3})|(?:40[0-9][0-5])|[1-9])'
  vlan_range: '(?:{{vlan_id}}(?:[-,]{{vlan_id}})*)'
  network_address: '(?:{{ip}})\s+(?:{{wildcard_mask}})'
  interface_names: |
    (?xi)
    (?:
      (?:vlan)|
      (?:port-channel)|
      (?:(?:(?:(?:Ten)?Gigabit)|(?:Fast))Ethernet)
    )
  interface_numbers: |
    (?x)
    (?:\d+(?:/\d+)*(?:\.\d+)?)?
  interface_number_ranged: |
    (?x)
    (?:\d+(?:/\d+)*(?:\.\d+)?)(?:-\d+)?
  network_target: |
    (?x)
    (?:
      (?:{{network_address}})|
      (?:{{ip}})|
      (?:any)
    )
  protocol_target: |
    (?x)
    (?:ip)|
    (?:tcp)|
    (?:udp)|
    (?:icmp)
  port_numbers: '(?:(?:[1-6]?\d{1,4}))'
  port_names: |
    (?x)
    bgp|
    ssh|
    snmp
  operators: '(?:(?:eq)|(?:ge)|(?:le))'
  port_target: '(?:(?:{{port_numbers}})|(?:{{port_names}}))'
  drives: |
    (?x)
    (?:
      (?:(?:(?:running)|(?:startup))-config)|
      (?:flash)|
      (?:disk(?:[0-3])?)
    )
  uri: '(?<protocol>(?:t?ftp)|scp)(?<protocol_seperator>://)(?<hostname>(?:\d+\.){3}\d+)(?<path>\/\S*)'
  locations: '(?:{{drive}}|{{uri}})'

contexts:

  main:
    - include: show
    - include: configure_terminal
    - include: enable

  prototype:
    - include: device_comment
    - include: comment
    - include: pipe

  scope:
    - include: removal
    - include: pop_ctx_word
    - include: comment

  removal:
    - meta_include_prototype: false
    - match: ^\s*(no\s[^{{comment}}]*)
      scope: text.network.cisco.removal
      captures:
        1: keyword.other

  pop_ctx_word:
    - match: ({{pop_ctx}})
      scope: scope.exit
      pop: true
      captures:
        1: comment.line
    - match: '^\s*(end)\s*$'
      captures:
        1: comment.block.documentation
      push:
        - clear_scopes: true
        - meta_content_scope: text.network.cisco.ios

  pop_context_on_unknown:
    - match: '(?=^\s*[^{{comment}}\s].*$)'
      pop: true

  configure_terminal:
    - match: ^\s*(?:(configure)\s*(terminal))
      with_prototype:
        - include: do_show
        - include: scope
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
      push: 
        - meta_content_scope: text.network.cisco.configure_terminal
        - include: bgp
        - include: vty
        - include: vrf
        - include: snmp
        - include: vlan
        - include: logging
        - include: interface
        - include: ip_route
        - include: prefix_list
        - include: vrf_upgrade
        - include: ipv6_unicast_routing
        - include: hostname
        - include: ipv6_general_prefix
        - include: extended_acl
        - include: standard_acl


  device_comment:
    - match: |
        (?xi)
        ^(
          \s*
          {{comment}}
          \s+
          (?:
            (?:on)|
            (?:devices?)
          )
          \s+
          \S.*
        )$
      scope: text.network.cisco.comment
      captures:
        0: cisco.scope
        1: comment.line

  comment:
    - match: ({{comment}}.*)$
      scope: text.network.cisco.comment
      captures:
        1: comment.line
  
  vrf_upgrade:
    - match: ^\s*(vrf)\s+(upgrade-cli)\s+(multi-af-mode)\s+((?:non-)?common-policies)(?:(?:\s+(vrf)\s+(\S+)(?:\s+(force))?)|(\s+force))?
      captures:
        1: support.constant
        2: support.constant
        3: support.constant
        4: support.constant
        5: support.constant
        6: string.unquoted
        7: support.constant
        8: support.constant

  enable:
    - include: write
    - include: copy
    - include: logout
    - include: configure_terminal
    - include: show_drives

  snmp:
    - include: snmp_trap
    - include: snmp_poll
  
  snmp_poll:
    - match: >
        (?x)
        \s*
        (snmp-server)\s+
        (community)\s+
        (\S+)
        (\s+(?:(?:RO)|(?:RW)))?
        (\s+\S+)?
      captures:
        1: support.constant       # snmp-server
        2: support.constant       # poll community
        3: string.unquoted        # poll community value
        4: support.constant       # RO / RW
        5: string.unquoted        # ACL value

  snmp_trap:
    - match: >
        (?x)
        \s*
        (snmp-server)\s+
        (host)\s+
        ({{ip}})\s+
        (?:(version)\s+((?:1)|(?:2c))\s+)?
        (\S+)
      captures:
        1: support.constant       # snmp-server
        2: support.constant       # host
        3: constant.numeric       # ip
        4: support.constant       # version
        5: constant.numeric       # version number
        6: string.unquoted        # trap community

  hostname:
    - match: ^\s*(hostname)\s*(\S+)
      captures:
        1: support.constant
        2: string.unquoted

  ipv6_general_prefix:
    - match: \s*(ipv6\s+general-prefix)\s+(\S+\s+)?((?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:)|:)))(?:%.+)?)(/\d+)(?:\s+(\S.*))?
      scope: ios.ipv6.general-prefix
      captures:
        1: support.constant
        2: string.unquoted
        3: constant.numeric
        4: constant.numeric
        5: invalid.illegal

  logging:
    - match: ^(?i)\s*(logging)\s+((?:\d+\.){3}\d+)\s+
      captures:
        1: support.constant
        2: constant.numeric

  standard_acl:
    - match: ^\s*(ip)\s+(access-list)\s+(standard)\s+(?:(\d+)|(\S+))
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: support.constant
        4: constant.numeric
        5: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.acl.standard
        - include: standard_ace
        - include: pop_context_on_unknown

  standard_ace:
    - match: |
        (?x)
        ^\s*
        ({{line_number}}\s+)?
        (?:(permit)|(deny))\s+
        (?:(?:({{network_target}})|(?:(host)\s+({{ip}}))))
      scope: text.network.cisco.acl.standard.ace
      captures:
        1: constant.numeric
        2: entity.other.attribute-name
        3: keyword.other
        4: constant.numeric
        5: support.constant
        6: constant.numeric

  extended_acl:
    - match: ^\s*(ip)\s+(access-list)\s+(extended)\s+(\S+)
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: support.constant
        4: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.acl.extended
        - include: extended_ace
        - include: pop_context_on_unknown


  extended_ace:
    - match: |
        (?x)
        ^\s*
        ({{line_number}}\s+)?
        (?:(permit)|(deny))\s+
        ({{protocol_target}})
        (?:
          (?:
            (?:\s+(?:({{network_target}})|(?:(host)\s+({{ip}}))))
            (?:\s+({{operators}})\s+({{port_target}}))?
            (\s+established)?
            (?:\s+(?:({{network_target}})|(?:(host)\s+({{ip}}))))
            (?:\s+({{operators}})\s+({{port_target}}))?
            (\s+established)?
          )
        )
      scope: text.network.cisco.acl.extended.ace
      captures:
        1: constant.numeric             # Line number
        2: entity.other.attribute-name  # Permit
        3: keyword.other                # Deny
        4: support.constant             # Protocol Name
        5: constant.numeric             # Source Network
        6: support.constant             # Source Host
        7: constant.numeric             # Source Host IP
        8: support.constant             # Source Operator
        9: constant.numeric             # Source Port
        10: support.constant            # Source Established
        11: constant.numeric.target_ip  # Destination Network
        12: support.constant            # Destination Host
        13: constant.numeric            # Destination Host IP
        14: support.constant            # Destination Operator
        15: constant.numeric            # Destination Port
        16: support.constant            # Destination Established
        17: ios.acl.ace.target_ip       # IP target scope

  bgp:
    - match: ^\s*(router)\s+(bgp)\s+(\d+)
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: constant.language
      push:
        - meta_content_scope: text.network.cisco.bgp
        - include: ipv6_address_family
        - include: ipv4_address_family
        - include: pop_context_on_unknown

  ipv4_address_family:
    - match: ^\s*(address-family)\s+(ipv4)(?:\s+(vrf)\s+(\S+))?
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: support.constant
        4: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.bgp.ipv4.address_family
        - match: '({{pop_address_family_ctx}})'
          pop: true
          captures:
            1: comment.line
        - include: ipv4_network
        - include: ipv4_neighbor
        - include: pop_context_on_unknown

  ipv6_address_family:
    - match: ^\s*(address-family)\s+(ipv6)\s+(vrf)\s+(\S+)\s*(\s+\S.*)?$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: support.constant
        4: string.unquoted
        5: invalid.illegal
      push:
        - meta_content_scope: text.network.cisco.bgp.ipv6.address_family
        - match: '({{pop_address_family_ctx}})'
          pop: true
          captures:
            1: comment.line
        - include: ipv6_network
        - include: ipv6_neighbor
        - include: pop_context_on_unknown

  ipv4_neighbor:
    - match: |
        (?x) 
        ^\s*(neighbor)\s+({{ip}})\s+
        (?:
        (activate)|
        (shutdown)|
        (next-hop-self)|
        (?:(soft-reconfiguration)\s+(inbound|outbound))|
        (?:(password)\s+(\d+)\s+(\S+))|
        (?:(prefix-list|route-map)\s+(\S+)\s+(in|out))|
        (?:(inherit)\s+(peer-policy)\s+(\S+))|
        (send-community)|
        (?:(remote-as)\s+(\d+))|
        (?:(timers)\s+(\d+)\s+(\d+)(?:\s+(\d+))?)|
        (?:(ttl-security)\s+(hops)\s+(\d+))|
        (?:(description)\s+(.*))|
        (?:(version)\s+(\d+))|
        (?:(transport)\s+(path-mtu-discovery))
        )
      captures:
        1: support.constant               # Neighbor
        2: constant.numeric               # IP
        3: entity.other.attribute-name    # Active
        4: keyword.other                  # Shutdown
        5: support.constant               # Next-hop-self
        6: support.constant               # Soft reconfiguration inbound
        7: support.constant               # Soft reconfiguration inbound
        8: support.constant               # Password
        9: constant.numeric               # Password
        10: string.unquoted               # Password
        11: support.constant              # Prefix list
        12: string.unquoted               # Prefix list
        13: support.constant              # Prefix list
        14: support.constant              # Inherit peer policy
        15: support.constant              # Inherit peer policy
        16: string.unquoted               # Inherit peer policy
        17: support.constant              # Send community
        18: support.constant              # Remote AS
        19: constant.numeric              # Remote AS
        20: support.constant              # Timers
        21: constant.numeric              # Timers
        22: constant.numeric              # Timers
        23: constant.numeric              # Timers
        24: support.constant              # TTL security hops
        25: support.constant              # TTL security hops
        26: constant.numeric              # TTL security hops
        27: support.constant              # Description
        28: comment.block.documentation   # Description
        29: support.constant              # Version
        30: constant.numeric              # Version
        31: support.constant              # Path MTU discovery
        32: support.constant              # Path MTU discovery

  ipv4_network:
    - match: '^\s+(network)\s+({{ip}})(?:\s+(mask)\s+({{subnet_mask}}))?'
      captures:
        1: support.constant
        2: constant.numeric
        3: support.constant
        4: constant.numeric

  ipv6_neighbor:
    - match: |
        (?x) 
        ^\s*(neighbor)\s+({{ipv6}})\s+
        (?:
        (activate)|
        (shutdown)|
        (next-hop-self)|
        (?:(soft-reconfiguration)\s+(inbound|outbound))|
        (?:(password)\s+(\d+)\s+(\S+))|
        (?:(prefix-list|route-map)\s+(\S+)\s+(in|out))|
        (?:(inherit)\s+(peer-policy)\s+(\S+))|
        (send-community)|
        (?:(remote-as)\s+(\d+))|
        (?:(timers)\s+(\d+)\s+(\d+)(?:\s+(\d+))?)|
        (?:(ttl-security)\s+(hops)\s+(\d+))|
        (?:(description)\s+(.*))|
        (?:(version)\s+(\d+))|
        (?:(transport)\s+(path-mtu-discovery))
        )
      captures:
        1: support.constant               # Neighbor
        2: constant.numeric               # IP
        3: entity.other.attribute-name    # Active
        4: keyword.other                  # Shutdown
        5: support.constant               # Next-hop-self
        6: support.constant               # Soft reconfiguration inbound
        7: support.constant               # Soft reconfiguration inbound
        8: support.constant               # Password
        9: constant.numeric               # Password
        10: string.unquoted               # Password
        11: support.constant              # Prefix list
        12: string.unquoted               # Prefix list
        13: support.constant              # Prefix list
        14: support.constant              # Inherit peer policy
        15: support.constant              # Inherit peer policy
        16: string.unquoted               # Inherit peer policy
        17: support.constant              # Send community
        18: support.constant              # Remote AS
        19: constant.numeric              # Remote AS
        20: support.constant              # Timers
        21: constant.numeric              # Timers
        22: constant.numeric              # Timers
        23: constant.numeric              # Timers
        24: support.constant              # TTL security hops
        25: support.constant              # TTL security hops
        26: constant.numeric              # TTL security hops
        27: support.constant              # Description
        28: comment.block.documentation   # Description
        29: support.constant              # Version
        30: constant.numeric              # Version
        31: support.constant              # Path MTU discovery
        32: support.constant              # Path MTU discovery

  ipv6_network:
    - match: '^\s*(network)\s+({{ipv6_prefix}})?'
      captures:
        1: support.constant
        2: constant.numeric

  ipv6_unicast_routing:
  - match: ^\s*(ipv6\s+unicast-routing)
    captures:
      1: support.constant

  ip_route: 
    - include: ipv4_route
    - include: ipv6_route

  ipv4_route:
    - match: |
        (?x) 
        ^\s*
        (?:
          (ip)\s+(route)\s+
          (?:(vrf)\s+(\S+)\s+)?
          ({{ip}})\s+
          ({{subnet_mask}})\s+
          (?:({{interface_names}})\s*({{interface_numbers}})\s+)?
          ({{ip}})
          (?:
            (?:\s+(name)\s+(\S+))?
            (?:\s+(permanent))?
            (?:\s+(track)\s+(\S+))?
            (?:\s+(tag)\s+(\S+))?
          )
        )
      captures:
        1: support.constant             # ip
        2: support.constant             # route
        3: support.constant             # vrf
        4: string.unquoted              # vrf name
        5: constant.numeric             # ip
        6: constant.numeric             # subnet mask
        7: entity.other.attribute-name  # next hop interface
        8: constant.numeric             # next hop interface id
        9: constant.numeric             # next hop ip
        10: support.constant            # name 
        11: string.unquoted             # name 
        12: support.constant            # perminate
        13: support.constant            # track
        14: constant.numeric            # track id
        15: support.constant            # tag
        16: constant.numeric            # tag id

  ipv6_route:
    - match: |
        (?x) 
        ^\s*
        (ipv6)\s+(route)\s+
        (?:(vrf)\s+(\S+)\s+)?
        ({{ipv6_prefix}})\s+
        (?:({{interface_names}})\s*({{interface_numbers}})\s+)?
        ({{ipv6}})
        (?:
          (?:\s+(name)\s+(\S+))?
          (?:\s+(permanent))?
          (?:\s+(track)\s+(\S+))?
          (?:\s+(tag)\s+(\S+))?
        )
      captures:
        1: support.constant             # ip
        2: support.constant             # route
        3: support.constant             # vrf
        4: string.unquoted              # vrf name
        5: constant.numeric             # ip
        6: entity.other.attribute-name  # next hop interface
        7: constant.numeric             # next hop interface id
        8: constant.numeric             # next hop ip
        9: support.constant             # name 
        10: string.unquoted             # name 
        11: support.constant            # perminate
        12: support.constant            # track
        13: constant.numeric            # track id
        14: support.constant            # tag
        15: constant.numeric            # tag id

  prefix_list: 
    - include: ipv4_prefix_list
    - include: ipv6_prefix_list

  ipv4_prefix_list:
    - match: |
        (?x) 
        ^\s*(ip)\s+(prefix-list)\s+(\S+)\s+
        (?:(seq)\s+(\d+)\s+)?        
        (?:(permit)|(deny))\s+
        ({{ip_prefix}})
        (?:
          \s+({{operators}})\s+({{ipv4_prefix_length}})
          (?:\s+({{operators}})\s+({{ipv4_prefix_length}}))?
        )?
      captures:
        1: support.constant               # IP
        2: support.constant               # Prefix list
        3: string.unquoted                # Name
        4: support.constant               # sequence
        5: constant.numeric               # sequence number
        6: entity.other.attribute-name    # permit
        7: keyword.other                  # deny
        8: constant.numeric               # prefix
        9: support.constant               # operator
        10: constant.numeric              # prefix
        11: support.constant              # operator
        12: constant.numeric              # prefix

  ipv6_prefix_list:
    - match: |
        (?x) 
        ^\s*(ipv6)\s+(prefix-list)\s+(\S+)\s+
        (?:(seq)\s+(\d+)\s+)?        
        (?:(permit)|(deny))\s+
        ({{ipv6_prefix}})
        (?:
          \s+({{operators}})\s+({{ipv6_prefix_length}})
          (?:\s+({{operators}})\s+({{ipv6_prefix_length}}))?
        )?
      captures:
        1: support.constant               # IP
        2: support.constant               # Prefix list
        3: string.unquoted                # Name
        4: support.constant               # sequence
        5: constant.numeric               # sequence number
        6: entity.other.attribute-name    # permit
        7: keyword.other                  # deny
        8: constant.numeric               # prefix
        9: support.constant               # operator
        10: constant.numeric              # prefix
        11: support.constant              # operator
        12: constant.numeric              # prefix

  vlan:
    - match: '^\s*(vlan)\s+({{vlan_id}})'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.numeric
      push:
      - meta_content_scope: text.network.cisco.vlan
      - match: ^\s*(name)\s+(\S+)
        captures:
          1: support.constant
          2: string.unquoted
      - include: pop_context_on_unknown

  interface:
    - include: interface_default
    - include: interface_block

  interface_block:
    - match: >
        (?x)
        ^\s*
        (?:
          (interface)\s+
          (?:
            (?:(range)\s+({{interface_names}})\s*({{interface_number_ranged}}))|
            ({{interface_names}})\s*({{interface_numbers}})
          )
        )
      captures:
        0: cisco.scope.interface
        1: variable.parameter               # interface
        2: support.constant               # range
        3: entity.other.attribute-name    # interface name
        4: constant.numeric               # interface number
        5: entity.other.attribute-name    # interface name
        6: constant.numeric               # interface number
      push:
      - meta_content_scope: text.network.cisco.interface
      - include: standby
      - include: switchport
      - match: |
          (?x)
          ^\s*
          (?:
            (?:(description.*))|
            (?:((?:ip\s+)?vrf\s+forwarding)\s+(\S*))|
            (port-channel\s+standalone-disable)|
            (?:(encapsulation\s+dot1q)\s+({{vlan_id}}))|
            (?:(ip\s+helper-address)\s+({{ip}}))|
            (?:(ip\s+access-group)\s+(\S+)\s+(in|out))|
            (?:(ip\s+proxy-arp))|
            (?:(ip(?:v6)?\s+redirects))|
            (?:(ipv6\s+address\s+general-prefix)\s+({{ipv6_prefix}}))(\s+eui-64)?|
            (?:(ipv6\s+nd\s+prefix)\s+({{ipv6_prefix}}))|
            (?:(ip\s+address)\s+({{ip}})\s+({{subnet_mask}})(\s+secondary)?)|
            (shutdown)|
            (ipv6\s+enable)|
            (?:(channel-group)\s+(\d+)\s+(mode)\s+(active))
          )
        captures:
          1: comment.line                 # Description
          2: support.constant             # ip vrf forwarding
          3: string.unquoted              # vrf name
          4: support.constant             # port-channel standalone-disable
          5: support.constant             # encapsulation dot1q
          6: constant.numeric             # dot1q id
          7: support.constant             # ip helper-address
          8: constant.numeric             # dhcp-ip
          9: support.constant             # ip access-group
          10: string.unquoted             # acl name
          11: support.constant            # in / out
          12: support.constant            # proxy-arp
          13: support.constant            # ip redirects
          14: support.constant            # ipv6 address general-prefix
          15: constant.numeric            # ipv6 prefix
          16: support.constant            # eui-64
          17: support.constant            # ipv6 nd prefix
          18: support.constant            # ipv6 nd prefix
          19: support.constant            # ip address
          20: constant.numeric            # ip address ipv4 address
          21: constant.numeric            # ip address ipv4 subnet mask
          22: support.constant.secondary  # ip address secondary
          23: keyword.other               # shutdown
          24: support.constant            # ipv6 enable
          25: support.constant            # channel-group
          26: constant.numeric            # channel-group id
          27: support.constant            # channel-group mode
          28: support.constant            # channel-group mode active
      - include: pop_context_on_unknown

  standby:
    - match: |
        (?x)
        ^\s*
        (?:
          (standby)\s+(?:(\d+)|(?:(version)\s+([1-2])))\s+
          (?:
            (?:(ip)\s+({{ip}}))|
            (?:(preempt)(?:\s+(delay\s+minimum)\s+(\d+)(?:\s+(reload)\s+(\d+))?)?)|
            (?:(track)\s+(\d+)\s+(decrement)\s+(\d+))|
            (?:(priority)\s+(\d+))|
            (?:(ipv6)\s+(?:
               (?:(autoconfig))|
               (?:({{ipv6}}))
              )
            )
          )?
        )
      captures: 
        1: support.constant       # standby
        2: constant.numeric       # standby id
        3: support.constant       # version
        4: constant.numeric       # version number
        5: support.constant       # ip
        6: constant.numeric       # ip address
        7: support.constant       # preempt
        8: support.constant       # delay minimum
        9: constant.numeric       # delay time
        10: support.constant       # reload
        11: constant.numeric       # reload time
        12: support.constant       # track
        13: constant.numeric       # track number
        14: support.constant       # track decrement
        15: constant.numeric       # track decrement number
        16: support.constant       # priority
        17: constant.numeric       # priority number
        18: support.constant       # ipv6
        19: support.constant       # ipv6 autoconfig
        20: constant.numeric       # ipv6 ip

  switchport:
    - match: '^\s*(switchport\s+mode\s+(?:trunk|access|capture))'
      captures:
        1: support.constant
    - include: switchport_trunk
    - include: switchport_access
    - match: '^\s*(switchport)'
      captures:
        1: support.constant

  switchport_access:
    - match: ^\s*(switchport\s+access\s+vlan)\s+({{vlan_id}})
      captures: 
        1: support.constant
        2: constant.numeric

  switchport_trunk:
    - match: |
        (?xi)
        ^\s*
        (?:
          (switchport\s+trunk)\s+
          (?:
            (encapsulation\s+dot1q)|
            (allowed\s+vlan)\s+
            (?:(?:(add)|(remove))\s+)?({{vlan_range}})
          )
        )
      captures: 
        1: support.constant               # switchport trunk
        2: support.constant               # mode trunk
        3: support.constant               # encapsulation dot1q
        4: entity.other.attribute-name    # add
        5: keyword.other                  # remove
        6: constant.numeric               # vlan

    
  interface_default:
    - match: |
        (?x)
        ^\s*
        (?:
          (default)\s+
          (interface)\s+
          ({{interface_names}})\s*
          ({{interface_numbers}})
        )
      captures:
        1: support.constant               # default
        2: support.constant               # interface
        3: entity.other.attribute-name    # interface name
        4: constant.numeric               # interface number


  vty:
    - match: '^\s*(line)\s+(vty)\s+(\d+)\s+(\d+)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: constant.numeric
        4: constant.numeric
      push:
      - meta_content_scope: text.network.cisco.vty
      - match: ^\s*(access-class)\s+(?:(\d+)|(\S+))\s+(in)(?:\s+(vrf-also))?
        captures:
          1: support.constant
          2: constant.numeric
          3: string.unquoted
          4: support.constant
          5: support.constant
      - match: ^\s*(transport\s+input)\s+((?:telnet|ssh)(?:\s+(?:telnet|ssh))?)
        captures:
          1: support.constant
          2: support.constant
      - include: pop_context_on_unknown

  vrf:
    - match: '^\s*(vrf)\s+(definition)\s+(\S+)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: string.unquoted
      push:
      - meta_content_scope: text.network.cisco.vrf
      - include: vrf_address_family
      - match: >
          (?xi)
          ^\s*
          (?:
            (?:(description.*))|
            (?:(rd)\s+([0-9\.:]+))|
            (?:(route-target)\s+(import|export|both)\s+([0-9\.:]+))
          )
        captures:
          1: comment.line                   # description
          2: support.constant               # rd
          3: constant.numeric               # rd id
          4: support.constant               # route-target
          5: entity.other.attribute-name    # route-target import/export/both
          6: constant.numeric               # route-target id
      - include: pop_context_on_unknown

  vrf_address_family:
    - include: vrf_ipv4_address_family
    - include: vrf_ipv6_address_family

  vrf_ipv4_address_family:
    - match: '^\s*(address-family)\s+(ipv4)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
      push:
      - meta_content_scope: text.network.cisco.vrf.ipv4_address_family
      - match: '({{pop_address_family_ctx}})'
        pop: true
        captures:
          1: comment.line
      - match: >
          (?xi)
          \s*
          (?:(export\s+map)\s+(\S+))
        captures:
          1: support.constant        # export map
          2: string.unquoted         # export map name
      - include: pop_context_on_unknown

  vrf_ipv6_address_family:
    - match: '^\s*(address-family)\s+(ipv6)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
      push:
      - meta_content_scope: text.network.cisco.vrf.ipv6_address_family
      - match: '({{pop_address_family_ctx}})'
        pop: true
        captures:
          1: comment.line
      - match: >
          (?xi)
          ^\s*
          (?:
            (?:(export\s+map)\s+(\S+))
          )
        captures:
          1: support.constant        # export map
          2: string.unquoted         # export map name
      - include: pop_context_on_unknown

  do_show:
    - match: '^\s*(do)'
      captures:
          1: support.constant
      push: 
        - match: '$'
          pop: true
        - include: show

  show:
    - include: show_vlan
    - include: show_interface
    - include: show_run_interface
    - include: show_bgp
    - include: show_standby
    - include: show_ip_interface_brief
    - include: show_route

  show_vlan:
    - match: '\s*(show\s+vlan)(\s+(id)\s+({{vlan_id}}))?'
      captures:
        1: support.constant
        2: constant.numeric
        3: support.constant
        4: constant.numeric

  show_interface:
    - match: '\s*(show\s+interface)(?:(\s+{{interface_names}})\s*({{interface_numbers}}))?'
      captures:
        1: support.constant
        2: entity.other.attribute-name
        3: constant.numeric
        4: support.constant

  show_run_interface:
    - match: '\s*(show\s+run\s+interface)(?:(\s+{{interface_names}})\s*({{interface_numbers}}))?'
      captures:
        1: support.constant
        2: entity.other.attribute-name
        3: constant.numeric
        4: support.constant


  show_bgp:
    - match: |
        (?x)
        (show\s+ip\s+bgp)
        (?:
          (?:
            (?:\s+(vpnv6)\s+
              (unicast)(?:
                (?:\s+(vrf)\s+(\S+)(?:\s+({{ipv6_prefix}}|{{ipv6}}))?)
              )?
            )|
            (?:\s+(vpnv4)\s+
              (unicast)(?:
                (?:\s+(vrf)\s+(\S+)(?:\s+({{ip_prefix}}|{{ip}}))?)
              )?
            )
          )
        )?
      captures:
        1: support.constant                 # show ip bgp
        2: support.constant                 # vpnv6
        3: support.constant                 # vpnv6 unicast
        4: support.constant                 # vpnv6 unicast vrf
        5: string.unquoted                  # vpnv6 unicast vrf name
        6: constant.numeric                 # vpnv6 unicast vrf name prefix
        7: support.constant                 # vpnv4
        8: support.constant                 # vpnv4 unicast
        9: support.constant                 # vpnv4 unicast vrf
        10: string.unquoted                 # vpnv4 unicast vrf name
        11: constant.numeric                # vpnv4 unicast vrf name prefix
        13: entity.other.attribute-name
        14: constant.numeric
        15: support.constant

  show_standby:
    - match: '\s*(show\s+standby)(?:\s+({{interface_names}})\s*({{interface_numbers}}))?(\s+brief)?'
      captures:
        1: support.constant
        2: entity.other.attribute-name
        3: constant.numeric
        4: support.constant

  show_ip_interface_brief:
    - match: '\s*(show\s+ip\s+interface\s+brief)(?:\s+({{interface_names}})\s*({{interface_numbers}}))?'
      captures:
        1: support.constant
        2: entity.other.attribute-name
        3: constant.numeric

  show_route:
    - match: |
        (?xi)
        \s*(show)\s+
        (?:
          (?:
            (ipv6\s+route)
            (?:\s+(vrf)\s+(\S+))?
            (\s+{{ipv6}})?
          )
          |
          (?:
            (ip\s+route)
            (?:\s+(vrf)\s+(\S+))?
            (\s+{{ip}})?
          )

        )
      captures:
        1: support.constant           # show
        2: support.constant           # ipv6 route
        3: support.constant           # ipv6 vrf
        4: string.unquoted            # ipv6 vrf name
        5: constant.numeric           # ipv6 prefix
        6: support.constant           # ip route
        7: support.constant           # ip vrf
        8: string.unquoted            # ip vrf name
        9: constant.numeric           # ip prefix

  locations:
    - include: location_local
    - include: location_remote

  location_remote:
    - match: ((?:t?ftp)|scp)(://)((?:\d+\.){3}\d+)(\/\S*)?
      captures:
        1: entity.other.attribute-name
        2: support.constant
        3: constant.language
        4: support.constant

  location_local:
    - match: ({{drives}}|(?:running|startup)-config)
      captures:
        1: support.constant

  write:
    - match: '^\s*(write)\s*'
      captures:
        1: support.constant

  logout:
    - match: '^\s*(logout)\s*'
      captures:
        1: support.constant

  copy:
    - match: '^\s*(copy)\s*'
      set: copy_location_source
      captures:
        1: support.constant

  copy_location_source:
    - match: \s
      set: copy_location_destination
    - include: locations

  copy_location_destination:
    - match: (?:\s|{{comment}}|$)
      pop: true
    - include: locations

  pipe:
    - match: (?<=\s)(\|)
      scope: text.network.cisco.pipe
      captures:
        1: keyword.other
      push: 
        - meta_content_scope: text.network.cisco.pipe
        - match: '(?=(?:{{comment}})|$)'
          pop: true
        - match: >
            (?x)
            \s+
            (?:
              (include)|
              (exclude)
            )
            \s+
            ([^{{comment}}]*)
          captures:
            1: entity.other.attribute-name
            2: keyword.other
            3: string.unquoted
  show_drives:
    - match: '\s*(show)\s+({{drives}})'
      captures:
        1: support.constant
        2: support.constant
