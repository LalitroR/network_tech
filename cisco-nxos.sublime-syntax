%YAML 1.2
---
name: Cisco NXOS
file-extensions: [cisco-nxos]
first_line_match: ^(?i)#!\s*cisco(\s+|\-)nxos$\n?
scope: text.network.cisco.nxos


variables:
  comment: '(?:!|#)'
  pop_ctx: '^\s*exit\s*$'
  pop_address_family_ctx: '^\s*(?:exit-address-family)\s*$'
  command_end: '(?:\s|{{comment}}|$)'
  line_number: '^\s*\d+'
  ip: '(?:(?:(?:[0-2]?\d?\d)\.){3}(?:[0-2]?\d?\d))'
  subnet_mask: '{{ip}}'
  ipv4_prefix_length: '(?:(?:\d?\d)|(?:3[0-2]))'
  ip_prefix: '(?:{{ip}}/{{ipv4_prefix_length}})'
  ipv6_prefix_length: '(?:1?\d?\d)'
  ipv6_prefix: '(?:(?:(?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(?:%.+)?/{{ipv6_prefix_length}}|::/0))'
  ipv6: '(?:(?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(?:%.+)?)'
  vlan_id: '(?:(?:\d{2,3})|(?:[0-3]\d{2,3})|(?:40[0-9][0-5])|[1-9])'
  vlan_range: '(?:{{vlan_id}}(?:-|,{{vlan_id}})*)'
  network_address: '(?:{{ip}})\s+(?:{{ip}})'
  interface_names: |
    (?xi)
    (?:
      (?:vlan)|
      (?:port-channel)|
      (?:ethernet)
    )
  interface_numbers: |
    (?xi)
    (?:\d+(?:/\d+)*(?:\.\d+)?)
  interface_number_ranged: |
    (?x)
    (?:\d+(?:/\d+)*(?:\.\d+)?)(?:-\d+)?
  network_target: |
    (?x)
    (?:{{ip_prefix}})|
    (?:any)
  protocol_target: |
    (?x)
    (?:ip)|
    (?:tcp)|
    (?:udp)|
    (?:icmp)
  port_numbers: '(?:(?:(?:65535)|\d{1,4}))'
  port_names: |
    (?x)
    bgp|
    ssh|
    snmp
  operators: '(?:(?:eq)|(?:ge)|(?:le))'
  port_target: '(?:(?:{{port_numbers}})|(?:{{port_names}}))'
  drives: |
    (?x)
    (?:
      (?:(?:(?:running)|(?:startup))-config)|
      (?:flash)|
      (?:disk(?:[0-3])?)
    )
  uri: '(?<protocol>(?:t?ftp)|scp)(?<protocol_seperator>://)(?<hostname>(?:\d+\.){3}\d+)(?<path>\/\S*)'
  locations: '(?:{{drive}}|{{uri}})'

contexts:

  main:
    - include: configure_terminal
    - include: enable

  prototype:
    - include: show
    - include: 'Packages/sublime-network/cisco/global.sublime-syntax'

  enable:
    - include: 'Packages/sublime-network/cisco/enable.sublime-syntax'

  configure_terminal:
    - match: ^\s*(?:(configure)\s*(terminal))
      with_prototype:
        - include: do_show
        - include: 'Packages/sublime-network/cisco/scope.sublime-syntax'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
      push: 
        - meta_content_scope: text.network.cisco.configure_terminal
        - include: logging
        - include: bgp
        - include: vty
        - include: vlan
        - include: interface
        - include: ip_route
        - include: prefix_list
        - include: acl
        - include: 'Packages/sublime-network/cisco/configure_terminal.sublime-syntax'
  
  logging:
    - match: >
        (?ix)
        ^\s*(logging\s+server)\s+
        ({{ip}})\s+(\d+)(?:\s+(use-vrf)\s+(\S+))?(?:\s+(facility)\s+(\S+))?
      captures:
        1: support.constant
        2: constant.numeric
        3: constant.numeric
        4: support.constant
        5: string.unquoted
        6: support.constant
        7: support.constant

  acl:
    - match: ^\s*(ip)\s+(access-list)\s+(\S+)
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.acl.extended
        - include: ace

  ace:
    - match: |
        (?x)
        ({{line_number}}\ +)
        (?:(permit)|(deny))\ +
        ({{protocol_target}})\ +
        ({{network_target}})
        (?:\ +({{operators}})\ +({{port_target}}))?
        (\ +established)?
        (\ +{{network_target}})
        (?:\ +({{operators}})\ +({{port_target}}))?
        (\ +established)?
      scope: text.network.cisco.acl.extended.ace
      captures:
        1: constant.numeric             # Line number
        2: entity.other.attribute-name  # Permit
        3: keyword.other                # Deny
        4: support.constant             # Protocol Name
        5: constant.numeric             # Source Network
        6: support.constant             # Source Operator
        7: constant.numeric             # Source Port
        8: support.constant             # Source Established
        9: constant.numeric             # Destination Network
        10: support.constant            # Destination Operator
        11: constant.numeric            # Destination Port
        12: support.constant            # Destination Established

  bgp:
    - match: '^\s*(router)\s+(bgp)\s+(\d+)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: constant.language
      push:
        - meta_content_scope: text.network.cisco.bgp
        - include: bgp_vrf

  bgp_vrf:
    - match: '^\s*(vrf)\s+(\S+)'
      captures:
        0: cisco.scope
        1: support.constant
        2: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.bgp.vrf
        - include: ipv6_address_family
        - include: ipv4_address_family
        - match: '^\s*(log-neighbor-changes)'
          captures:
            1: support.constant


  ipv4_address_family:
    - match: ^\s*(address-family)\s+(ipv4)\s+(unicast)
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: support.constant
      push:
        - meta_content_scope: text.network.cisco.bgp.vrf.ipv4_address-family
        - match: '({{pop_address_family_ctx}})'
          pop: true
          captures:
            1: comment.line
        - include: ipv4_network
        - include: ipv4_neighbor

  ipv6_address_family:
    - match: ^\s*(address-family)\s+(ipv6)\s+(unicast)
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: support.constant
      push:
        - meta_content_scope: text.network.cisco.bgp.vrf.ipv6_address-family
        - match: '({{pop_address_family_ctx}})'
          pop: true
          captures:
            1: comment.line
        - include: ipv6_network
        - include: ipv6_neighbor

  ipv4_neighbor:
    - match: '(neighbor)\s+({{ip}})'
      captures:
        0: cicso.scope
        1: support.constant
        2: constant.numeric
      push:
        - meta_content_scope: text.network.cisco.bgp.vrf.ipv4_address-family.neighbor
        - match: |
            (?x) 
            (?:
            (activate)|
            (shutdown)|
            (next-hop-self)|
            (?:(soft-reconfiguration)\s+(inbound|outbound))|
            (?:(password)\s+(\d+)\s+(\S+))|
            (?:(prefix-list|route-map)\s+(\S+)\s+(in|out))|
            (?:(inherit)\s+(peer)\s+(\S+))|
            (send-community)|
            (?:(remote-as)\s+(\d+))|
            (?:(timers)\s+(\d+)\s+(\d+)(?:\s+(\d+))?)|
            (?:(ttl-security)\s+(hops)\s+(\d+))|
            (?:(description)\s+(.*))|
            (?:(version)\s+(\d+))|
            (?:(transport)\s+(path-mtu-discovery))
            )
          captures:
            1: entity.other.attribute-name    # Active
            2: keyword.other                  # Shutdown
            3: support.constant               # Next-hop-self
            4: support.constant               # Soft reconfiguration inbound
            5: support.constant               # Soft reconfiguration inbound
            6: support.constant               # Password
            7: constant.numeric               # Password
            8: string.unquoted                # Password
            9: support.constant               # Prefix list
            10: string.unquoted               # Prefix list
            11: support.constant              # Prefix list
            12: support.constant              # Inherit peer policy
            13: support.constant              # Inherit peer policy
            14: string.unquoted               # Inherit peer policy
            15: support.constant              # Send community
            16: support.constant              # Remote AS
            17: constant.numeric              # Remote AS
            18: support.constant              # Timers
            19: constant.numeric              # Timers
            20: constant.numeric              # Timers
            21: constant.numeric              # Timers
            22: support.constant              # TTL security hops
            23: support.constant              # TTL security hops
            24: constant.numeric              # TTL security hops
            25: support.constant              # Description
            26: comment.block.documentation   # Description
            27: support.constant              # Version
            28: constant.numeric              # Version
            29: support.constant              # Path MTU discovery
            30: support.constant              # Path MTU discovery

  ipv4_network:
    - match: ^\s+(network)\s+({{ip_prefix}})
      captures:
        1: support.constant
        2: constant.numeric

  ipv6_neighbor:
    - match: '(neighbor)\s+({{ipv6}})'
      captures:
        0: cicso.scope
        1: support.constant
        2: constant.numeric
      push:
        - meta_content_scope: text.network.cisco.bgp.vrf.ipv6_address-family.neighbor
        - match: |
            (?x) 
            ^\s*
            (?:
            (activate)|
            (shutdown)|
            (next-hop-self)|
            (?:(soft-reconfiguration)\s+(inbound|outbound))|
            (?:(password)\s+(\d+)\s+(\S+))|
            (?:(prefix-list|route-map)\s+(\S+)\s+(in|out))|
            (?:(inherit)\s+(peer)\s+(\S+))|
            (send-community)|
            (?:(remote-as)\s+(\d+))|
            (?:(timers)\s+(\d+)\s+(\d+)(?:\s+(\d+))?)|
            (?:(ttl-security)\s+(hops)\s+(\d+))|
            (?:(description)\s+(.*))|
            (?:(version)\s+(\d+))|
            (?:(transport)\s+(path-mtu-discovery))
            )
          captures:
            1: entity.other.attribute-name    # Active
            2: keyword.other                  # Shutdown
            3: support.constant               # Next-hop-self
            4: support.constant               # Soft reconfiguration inbound
            5: support.constant               # Soft reconfiguration inbound
            6: support.constant               # Password
            7: constant.numeric               # Password
            8: string.unquoted               # Password
            9: support.constant              # Prefix list
            10: string.unquoted               # Prefix list
            11: support.constant              # Prefix list
            12: support.constant              # Inherit peer policy
            13: support.constant              # Inherit peer policy
            14: string.unquoted               # Inherit peer policy
            15: support.constant              # Send community
            16: support.constant              # Remote AS
            17: constant.numeric              # Remote AS
            18: support.constant              # Timers
            19: constant.numeric              # Timers
            20: constant.numeric              # Timers
            21: constant.numeric              # Timers
            22: support.constant              # TTL security hops
            23: support.constant              # TTL security hops
            24: constant.numeric              # TTL security hops
            25: support.constant              # Description
            26: comment.block.documentation   # Description
            27: support.constant              # Version
            28: constant.numeric              # Version
            29: support.constant              # Path MTU discovery
            30: support.constant              # Path MTU discovery

  ipv6_network:
    - match: ^\s*(network)\s+({{ipv6_prefix}})?
      captures:
        1: support.constant
        2: constant.numeric

  ip_route: 
    - include: ipv4_route
    - include: ipv6_route

  ipv4_route:
    - match: |
        (?x) 
        ^\s*(ip)\s+(route)\s+
        (?:(vrf)\s+(\S+)\s+)?
        ({{ip_prefix}})\s+
        (?:({{interface_names}})\s*({{interface_numbers}})\s+)?
        ({{ip}})
        (?:
          (?:\s+(name)\s+(\S+))?
          (?:\s+(permanent))?
          (?:\s+(track)\s+(\S+))?
          (?:\s+(tag)\s+(\S+))?
        )
      captures:
        1: support.constant             # ip
        2: support.constant             # route
        3: support.constant             # vrf
        4: string.unquoted              # vrf name
        5: constant.numeric             # ip
        6: entity.other.attribute-name  # next hop interface
        7: constant.numeric             # next hop interface id
        8: constant.numeric             # next hop ip
        9: support.constant             # name 
        10: string.unquoted             # name 
        11: support.constant            # perminate
        12: support.constant            # track
        13: constant.numeric            # track id
        14: support.constant            # tag
        15: constant.numeric            # tag id

  ipv6_route:
    - match: |
        (?x) 
        ^\s*(ipv6)\s+(route)\s+
        (?:(vrf)\s+(\S+)\s+)?
        ({{ipv6_prefix}})\s+
        (?:({{interface_names}})\s*({{interface_numbers}})\s+)?
        ({{ipv6}})
        (?:
          (?:\s+(name)\s+(\S+))?
          (?:\s+(permanent))?
          (?:\s+(track)\s+(\S+))?
          (?:\s+(tag)\s+(\S+))?
        )
      captures:
        1: support.constant             # ip
        2: support.constant             # route
        3: support.constant             # vrf
        4: string.unquoted              # vrf name
        5: constant.numeric             # ip
        6: entity.other.attribute-name  # next hop interface
        7: constant.numeric             # next hop interface id
        8: constant.numeric             # next hop ip
        9: support.constant             # name 
        10: string.unquoted             # name 
        11: support.constant            # perminate
        12: support.constant            # track
        13: constant.numeric            # track id
        14: support.constant            # tag
        15: constant.numeric            # tag id

  prefix_list: 
    - include: ipv4_prefix_list
    - include: ipv6_prefix_list

  ipv4_prefix_list:
    - match: |
        (?x) 
        ^\s*(ip)\s+(prefix-list)\s+(\S+)\s+
        (?:(seq)\s+(\d+)\s+)?        
        (?:(permit)|(deny))\s+
        ({{ip_prefix}})
        (?:
          \s+({{operators}})\s+({{ipv4_prefix_length}})
          (?:\s+({{operators}})\s+({{ipv4_prefix_length}}))?
        )?
      captures:
        1: support.constant               # IP
        2: support.constant               # Prefix list
        3: string.unquoted                # Name
        4: support.constant               # sequence
        5: constant.numeric               # sequence number
        6: entity.other.attribute-name    # permit
        7: keyword.other                  # deny
        8: constant.numeric               # prefix
        9: support.constant               # operator
        10: constant.numeric              # prefix
        11: support.constant              # operator
        12: constant.numeric              # prefix

  ipv6_prefix_list:
    - match: |
        (?x) 
        ^\s*(ipv6)\s+(prefix-list)\s+(\S+)\s+
        (?:(seq)\s+(\d+)\s+)?        
        (?:(permit)|(deny))\s+
        ({{ipv6_prefix}})
        (?:
          \s+({{operators}})\s+({{ipv6_prefix_length}})
          (?:\s+({{operators}})\s+({{ipv6_prefix_length}}))?
        )?
      captures:
        1: support.constant               # IP
        2: support.constant               # Prefix list
        3: string.unquoted                # Name
        4: support.constant               # sequence
        5: constant.numeric               # sequence number
        6: entity.other.attribute-name    # permit
        7: keyword.other                  # deny
        8: constant.numeric               # prefix
        9: support.constant               # operator
        10: constant.numeric              # prefix
        11: support.constant              # operator
        12: constant.numeric              # prefix

  vlan:
    - match: '^\s*(vlan)\s+({{vlan_id}})'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.numeric
      push:
      - meta_content_scope: text.network.cisco.vlan
      - match: (name)\s+(\S+)
        captures:
          1: support.constant
          2: string.unquoted
      - match: (mode)\s+(fabricpath)
        captures:
          1: support.constant
          2: support.constant

  interface:
    - include: interface_default
    - include: interface_block

  interface_block:
    - match: |
        (?xi)
        ^\s*(interface)\s+
        (?:
          (?:(range)\s+({{interface_names}})\s*({{interface_number_ranged}}))|
          ({{interface_names}})\s*({{interface_numbers}})
        )
      captures:
        0: cisco.scope
        1: support.constant               # interface
        2: support.constant               # range
        3: entity.other.attribute-name    # interface name
        4: constant.numeric               # interface number
        5: entity.other.attribute-name    # interface name
        6: constant.numeric               # interface number
      push:
      - meta_content_scope: text.network.cisco.interface
      - include: switchport
      - include: spanning_tree
      - match: |
          (?x)
          (?:(description\s+\S.*))|
          (?:(vrf\s+member)\s+(\S*))|
          (port-channel\s+standalone-disable)|
          (?:(encapsulation\s+dot1q)\s+({{vlan_id}}))|
          (?:(ip\s+helper-address)\s+({{ip}}))|
          (?:(ip\s+access-group)\s+(\S+)\s+(in|out))|
          (?:(ip\s+proxy-arp))|
          (?:(ip(?:v6)?\s+redirects))|
          (?:(ipv6\s+address\s+general-prefix)\s+({{ipv6_prefix}}))(\s+eui-64)?|
          (?:(ipv6\s+nd\s+prefix)\s+({{ipv6_prefix}}))|
          (?:(ip\s+address)\s+({{ip}})\s+({{subnet_mask}})(\s+secondary)?)|
          (shutdown)|
          (ipv6\s+enable)|
          (?:(service-policy\s+type\s+queuing\s+output)\s+(\S+))|
          (?:(channel-group)\s+(\d+)(?:\s+(?:(force)|(?:(mode)\s+(?:(active)|(on)|(passive)))?))?)|
          (?:(vpc)\s+(\d+))|
          (?:(hsrp\s+version)\s+([1-2]))|
          (?:(ipv6\s+address)\s+({{ipv6_prefix}})(\s+eui-64)?)|
          (?:(ip\s+pim\s+sparse-mode))|
          (?:(ip\s+arp\s+timeout)\s+(\d+))|
          (?:(ip\s+arp\s+gratuitous\s+hsrp\s+duplicate))
        captures:
          1: comment.line                               # Description
          2: support.constant                           # ip vrf forwarding
          3: string.unquoted                            # vrf name
          4: support.constant                           # port-channel standalone-disable
          5: support.constant                           # encapsulation dot1q
          6: constant.numeric                           # dot1q id
          7: support.constant                           # ip helper-address
          8: constant.numeric                           # dhcp-ip
          9: support.constant                           # ip access-group
          10: string.unquoted                           # acl name
          11: support.constant                          # in / out
          12: support.constant                          # proxy-arp
          13: support.constant                          # ip redirects
          14: support.constant                          # ipv6 address general-prefix
          15: constant.numeric                          # ipv6 prefix
          16: support.constant                          # eui-64
          17: support.constant                          # ipv6 nd prefix
          18: support.constant                          # ipv6 nd prefix
          19: support.constant                          # ip address
          20: constant.numeric                          # ip address ipv4 address
          21: constant.numeric                          # ip address ipv4 subnet mask
          22: support.constant                          # ip address secondary
          23: keyword.other                             # shutdown
          24: support.constant                          # ipv6 enable
          25: support.constant                          # Service-policy
          26: string.unquoted                           # Service-policy
          27: support.constant                          # channel-group 
          28: constant.numeric                          # channel-group id
          29: support.constant                          # channel-group force
          30: support.constant                          # channel-group mode
          31: entity.other.inherited-class              # channel-group active
          32: entity.other.inherited-class              # channel-group on
          33: entity.other.inherited-class              # channel-group passive
          34: support.constant                          # vpc
          35: constant.numeric                          # vpc id
          36: support.constant                          # hsrp version
          37: constant.numeric                          # hsrp version number
          38: support.constant                          # ipv6 address
          39: constant.numeric                          # ipv6 prefix
          40: support.constant                          # ipv6 eui-64
          41: support.constant                          # ip pim sparse-mode
          42: support.constant                          # ip arp timeout
          43: constant.numeric                          # ip arp timeout number
          44: support.constant                          # ip arp gratuitous hsrp duplicate
      - match: '(hsrp)\s+(\d+)(\s+ipv6)?'
        captures:
          1: support.constant
          2: constant.numeric
          3: support.constant
        push:
        - meta_content_scope: text.network.cisco.interface.hsrp
        - include: hsrp

  hsrp:
    - include: hsrp_options
    - match: |
        (?x)
        (?:(ip)\s+({{ip}}))|
        (?:(ip)\s+({{ipv6}}))
      captures: 
        1: support.constant             # ip
        2: constant.numeric             # ip number
        3: support.constant             # ipv6
        4: constant.numeric             # ipv6 number

  hsrp_options:
    - match: |
        (?x)
        (?:(priority)\s+(\d+))|
        (?:(preempt\s+delay\s+minimum)\s+(\d+))|
        (?:(authentication)\s+(md5)\s+(key-string)\s+(\S+))
      captures: 
        1: support.constant             # priority
        2: constant.numeric             # priority number
        3: support.constant             # preempt
        4: constant.numeric             # preempt time
        5: support.constant             # authentication
        6: entity.other.inherited-class # authentication md5
        7: support.constant             # authentication key-string
        8: string.unquoted             # authentication key

  spanning_tree:
    - match: |
        (?x)
        (spanning-tree)\s+
        (?:
          (port\s+type\s+edge)\s+(trunk)|
          (bpduguard)\s+(?:(enable)|(disable))
        )?
      captures: 
        1: support.constant                   # spanning-tree
        2: support.constant                   # port type edge
        3: entity.other.inherited-class       # port type edge trunk
        4: support.constant                   # bpduguard
        5: entity.other.inherited-class       # bpduguard enable
        6: keyword.key                        # bpduguard disable

  switchport:
    - match: '(switchport\s+mode\s+(?:trunk|access|capture))'
      captures:
        1: support.constant
    - include: switchport_trunk
    - include: switchport_access
    - match: '(switchport)'
      captures:
        1: support.constant

  switchport_access:
    - match: ^\s*(switchport\s+access\s+vlan)\s+({{vlan_id}})
      captures: 
        1: support.constant
        2: constant.numeric

  switchport_trunk:
    - match: |
        (?xi)
        ^\s*(switchport\s+trunk)\s+
        (?:
          (encapsulation\s+dot1q)|
          (allowed\s+vlan)\s+
          (?:(?:(add)|(remove))\s+)?({{vlan_range}})
        )
      captures: 
        1: support.constant               # switchport trunk
        2: support.constant               # mode trunk
        3: support.constant               # encapsulation dot1q
        4: entity.other.attribute-name    # add
        5: keyword.other                  # remove
        6: constant.numeric               # vlan

    
  interface_default:
    - match: |
        (?x)
        (default)\s+
        (interface)\s+
        ({{interface_names}})\s*
        ({{interface_numbers}})
      captures:
        1: support.constant               # default
        2: support.constant               # interface
        3: entity.other.attribute-name    # interface name
        4: constant.numeric               # interface number


  vty:
    - match: '^\s*(line)\s+(vty)\s+(\d+)\s+(\d+)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: constant.numeric
        4: constant.numeric
      push:
      - meta_content_scope: text.network.cisco.vty
      - match: ^\s*(access-class)\s+(\d+)\s+(in)(?:\s+(vrf-also))?
        captures:
          1: support.constant
          2: constant.numeric
          3: support.constant
          4: support.constant
      - match: ^\s*(transport\s+input)\s+((?:telnet|ssh)(?:\s+(?:telnet|ssh))?)
        captures:
          1: support.constant
          2: support.constant

  show:
    - include: show_bgp
    - include: show_vlan
    - include: show_route 
    - include: show_standby
    - include: show_interface 
    - include: show_run_interface
    - include: show_ip_interface_brief

  show_bgp:
    - match: |
        (?x)
        (show\s+ip\s+bgp)
        (?:
          (?:
            (?:\s+(vpnv6)\s+
              (unicast)(?:
                (?:\s+(vrf)\s+(\S+)(?:\s+({{ipv6_prefix}}|{{ipv6}}))?)
              )?
            )|
            (?:\s+(vpnv4)\s+
              (unicast)(?:
                (?:\s+(vrf)\s+(\S+)(?:\s+({{ip_prefix}}|{{ip}}))?)
              )?
            )
          )
        )?
      captures:
        1: support.constant                 # show ip bgp
        2: support.constant                 # vpnv6
        3: support.constant                 # vpnv6 unicast
        4: support.constant                 # vpnv6 unicast vrf
        5: string.unquoted                  # vpnv6 unicast vrf name
        6: constant.numeric                 # vpnv6 unicast vrf name prefix
        7: support.constant                 # vpnv4
        8: support.constant                 # vpnv4 unicast
        9: support.constant                 # vpnv4 unicast vrf
        10: string.unquoted                 # vpnv4 unicast vrf name
        11: constant.numeric                # vpnv4 unicast vrf name prefix
        13: entity.other.attribute-name
        14: constant.numeric
        15: support.constant

  show_interface:
    - match: '\s*(show\s+interface)(?:(\s+{{interface_names}})\s*({{interface_numbers}}))?'
      captures:
        1: support.constant
        2: entity.other.attribute-name
        3: constant.numeric
        4: support.constant

  show_run_interface:
    - match: '\s*(show\s+run\s+interface)(?:(\s+{{interface_names}})\s*({{interface_numbers}}))?'
      captures:
        1: support.constant
        2: entity.other.attribute-name
        3: constant.numeric
        4: support.constant

  show_standby:
    - match: '\s*(show\s+standby)(?:\s+({{interface_names}})\s*({{interface_numbers}}))?(\s+brief)?'
      captures:
        1: support.constant
        2: entity.other.attribute-name
        3: constant.numeric
        4: support.constant

  show_vlan:
    - match: '\s*(show\s+vlan)(\s+(id)\s+({{vlan_id}}))?'
      captures:
        1: support.constant
        2: constant.numeric
        3: support.constant
        4: constant.numeric

  show_ip_interface_brief:
    - match: '\s*(show\s+ip\s+interface\s+brief)(?:\s+({{interface_names}})\s*({{interface_numbers}}))?(?:\s+(vrf)\s+(\S+))?'
      captures:
        1: support.constant
        2: entity.other.attribute-name
        3: constant.numeric
        4: support.constant
        5: string.unquoted

  show_route:
    - match: |
        (?xi)
        \s*(show)\s+
        (?:
          (?:
            (ipv6\s+route)
            (?:\s+(vrf)\s+(\S+))?
            (\s+{{ipv6}})?
          )
          |
          (?:
            (ip\s+route)
            (?:\s+(vrf)\s+(\S+))?
            (\s+{{ip}})?
          )

        )
      captures:
        1: support.constant           # show
        2: support.constant           # ipv6 route
        3: support.constant           # ipv6 vrf
        4: string.unquoted            # ipv6 vrf name
        5: constant.numeric           # ipv6 prefix
        6: support.constant           # ip route
        7: support.constant           # ip vrf
        8: string.unquoted            # ip vrf name
        9: constant.numeric           # ip prefix
