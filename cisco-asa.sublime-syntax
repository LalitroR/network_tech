%YAML 1.2
---
name: Cisco ASA
file-extensions: [cisco-asa]
first_line_match: ^(?i)#!\s*cisco(\s+|\-)asa$\n?
scope: text.network.cisco.asa


variables:
  comment: '(?:!|#)'
  pop_ctx: '^\s*exit\s*$'
  pop_address_family_ctx: '^\s*(?:exit-address-family)\s*$'
  command_end: '(?:\s|{{comment}}|$)'
  line_number: '^\s*\d+'
  ip: '(?:(?:(?:[0-2]?\d?\d)\.){3}(?:[0-2]?\d?\d))'
  subnet_mask: '(?:{{ip}})'
  ipv4_prefix_length: '(?:(?:\d?\d)|(?:3[0-2]))'
  ip_prefix: '(?:{{ip}}\s+{{subnet_mask}})'
  ipv6_prefix_length: '(?:1?\d?\d)'
  ipv6_prefix: '(?:(?:(?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(?:%.+)?/{{ipv6_prefix_length}}|::/0))'
  ipv6: '(?:(?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(?:%.+)?)'
  vlan_id: '(?:(?:\d{2,3})|(?:[0-3]\d{2,3})|(?:40[0-9][0-5])|[1-9])'
  vlan_range: '(?:{{vlan_id}}(?:-|,{{vlan_id}})*)'
  network_address: '(?:{{ip}})\s+(?:{{ip}})'
  interface_names: |
    (?xi)
    (?:
      (?:vlan)|
      (?:port-channel)|
      (?:(?:(?:(?:Ten)?Gigabit)|(?:Fast))Ethernet)
    )
  interface_numbers: |
    (?xi)
    (?:\d+(?:/\d+)*(?:\.\d+)?)
  interface_number_ranged: |
    (?x)
    (?:\d+(?:/\d+)*(?:\.\d+)?)(?:-\d+)?
  network_target: |
    (?x)
    (?:{{ip_prefix}})|
    (?:any4)|
    (?:any6)|
    (?:any)
  management_protocols: |
    (?x)
    (?:http)|
    (?:ssh)|
    (?:telnet)
  protocol_target: |
    (?x)
    (?:
     (?:ip)|
     (?:tcp)|
     (?:udp)
    )
  port_numbers: '(?:(?:[1-6]?\d{1,4}))'
  icmp_types: |
    (?x)
    (?:echo-reply)|
    (?:unreachable)|
    (?:source-quench)|
    (?:redirect)|
    (?:alternate-address)|
    (?:echo)|
    (?:router-advertisement)|
    (?:router-solicitation)|
    (?:time-exceeded)|
    (?:parameter-problem)|
    (?:timestamp-request)|
    (?:timestamp-reply)|
    (?:information-request)|
    (?:information-reply)|
    (?:address-mask-request)|
    (?:address-mask-reply)|
    (?:conversion-error)|
    (?:mobile-redirect)|
    (?:traceroute)
  port_names: |
    (?x)
    (?:bgp)|
    (?:domain)|
    (?:ftp)|
    (?:https)|
    (?:ldap)|
    (?:ldaps)|
    (?:nfs)|
    (?:ntp)|
    (?:rsh)|
    (?:smtp)|
    (?:snmptrap)|
    (?:snmp)|
    (?:sqlnet)|
    (?:ssh)|
    (?:sunrpc)|
    (?:syslog)|
    (?:www)
  operators: >
    (?:
      (?:eq)|
      (?:neq)|
      (?:ge)|
      (?:gt)|
      (?:lt)|
      (?:le)
    )
  valid_ports: '(?:(?:{{port_numbers}})|(?:{{port_names}}))'
  port_target: '(?:(?:{{port_numbers}})|(?:{{port_names}}))'
  drives: |
    (?x)
    (?:
      (?:(?:(?:running)|(?:startup))-config)|
      (?:flash)|
      (?:disk(?:[0-3])?)
    )
  uri: '(?:(?:t?ftp)|scp)(?://)(?<hostname>(?:\d+\.){3}\d+)(?:\/\S*)'
  locations: '(?:{{drive}}|{{uri}})'

contexts:

  main:
    - include: enable

  prototype:
    - include: pipe
    - include: show
    - include: device_comment
    - include: comment

  enable:
    - include: configure_terminal
    - include: changeto
    - include: terminal
    - include: write
    - include: copy
    - include: logout
    - include: configure_terminal
    - include: show_drives

  configure_terminal:
    - match: ^\s*(?:(configure)\s*(terminal))
      with_prototype:
        - include: do_show
        - include: scope
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
      push: 
        - meta_content_scope: text.network.cisco.configure_terminal
        - include: aaa
        - include: snmp
        - include: vlan
        - include: logging
        - include: objects
        - include: context
        - include: username
        - include: hostname
        - include: ip_route
        - include: password
        - include: interface
        - include: access_list
        - include: reverse_path
        - include: access_group
        - include: object_group
        - include: interface_mtu
        - include: fragment_chain
        - include: ssl_encryption
        - include: monitor_interface
        - include: ssh_key_exchange
        - include: crypto_key_generate
        - include: protocol_settings

  scope:
    - include: removal
    - include: pop_ctx_word
    - include: comment

  removal:
    - meta_include_prototype: false
    - match: ^\s*(no\s[^{{comment}}]*)
      scope: text.network.cisco.removal
      captures:
        1: keyword.other

  pop_ctx_word:
    - match: ({{pop_ctx}})
      pop: true
      captures:
        1: comment.line

  device_comment:
    - match: '(?i)({{comment}}\s*on\s+\S.*)$'
      scope: text.network.cisco.comment
      captures:
        0: cisco.scope
        1: comment.line

  comment:
    - match: ({{comment}}.*)$
      scope: text.network.cisco.comment
      captures:
        1: comment.line

  hostname:
    - match: ^\s*(hostname)\s*(\S+)
      captures:
        1: support.constant
        2: string.unquoted
  
  ssl_encryption:
    - match: '^\s*(ssl)\s+(encryption)\s+(\S+)\s+(\S+)'
      captures:
        1: support.constant
        2: support.constant
        3: string.unquoted
        4: string.unquoted
        5: string.unquoted

  crypto_key_generate:
    - match: ^\s*(crypto)\s+(key)\s+(generate)\s+(rsa)\s+(modulus)\s+([0-9]+)\s+(noconfirm)?
      captures:
        1: support.constant
        2: support.constant
        3: support.constant
        4: support.constant
        5: support.constant
        6: constant.numeric
        7: support.constant

  terminal:
    - match: '^\s*(terminal)\s+(width|pager)\s(\d+)'
      captures:
        1: support.constant
        2: support.constant
        3: constant.numeric

  changeto:
    - match: ^\s*(changeto)\s+(?:(system)|(context))\s+(\S+)
      captures:
        0: cisco.scope
        1: support.constant
        2: string.unquoted
        3: support.constant
        4: string.unquoted

  monitor_interface:
    - match: ^\s*(monitor-interface)\s+(\S+)
      captures:
        1: support.constant
        2: entity.other.inherited-class


  objects:
    - include: object_network
  
  description:
    - match: '^\s*(description.*)'
      captures:
        1: comment.line

  object_group:
    - include: object_group_network
    - include: object_group_service
    - include: object_group_protocol
  
  object_group_group_object:
    - match: '^\s*(group-object)\s+(\S+)'
      captures:
        1: support.constant
        2: string.unquoted
    
  object_network:
    - match: '^\s*(object)\s+(network)\s+(\S+)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.asa.object_group.network
        - include: description
        - match: |
            (?x) 
            (?:
             (?:(host)\s+({{ip}}))|
             (?:(fqdn)\s+(\S+))|
             (?:(subnet)\s+({{ip}})\s+({{subnet_mask}}))|
             (?:(range)\s+({{ip}}\s+{{ip}}))
            )
          captures:
            1: support.constant             # host
            2: constant.numeric             # ip
            3: support.constant             # fqdn
            4: string.unquoted              # fqdn name
            5: support.constant             # subnet
            6: constant.numeric             # subnet network
            7: constant.numeric             # subnet subnet mask  
            8: support.constant             # range
            9: constant.numeric             # ip low
            10: constant.numeric             # ip high

  object_group_protocol:
    - match: '^\s*(object-group)\s+(protocol)\s+(\S+)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.asa.object_group.protocol
        - include: description
        - include: object_group_group_object
        - match: |
            (?x) 
            (?:
              (protocol-object)\s+
              (?:
                ({{protocol_target}})
              )
            )
          captures:
            1: support.constant             # protocol-object
            2: constant.numeric             # protocol

  object_group_network:
    - match: '^\s*(object-group)\s+(network)\s+(\S+)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.asa.object_group.network
        - include: description
        - include: object_group_group_object
        - match: |
            (?x) 
            (?:
              (network-object)\s+
              (?:
                (?:(host)\s+({{ip}}))|
                (?:({{ip}})\s+({{subnet_mask}}))|
              )
            )
          captures:
            1: support.constant             # network-object
            2: support.constant             # host
            3: constant.numeric             # ip
            4: constant.numeric             # network
            5: constant.numeric             # subnet mask
  aaa:
    - match: |
        (?x) 
        (?:
          (aaa)\s+
          (?:
            (?:(authentication)\s+
              (?:
                (?:
                  ({{management_protocols}}|enable)\s+
                  (console)
                  ((?:\s+TACACS\+)?(?:\s+LOCAL)?)
                )
              )
            )|
            (?:(authorization)\s+
              (?:
                (exec\s+authentication-server\s+auto-enable)
              )
            )|
            (?:(accounting)\s+
              (?:
                ((?:(?:(?:{{management_protocols}})|(?:enable))\s+console)|(?:command))
                ((?:\s+TACACS\+)?(?:\s+LOCAL)?)
              )
            )
          )
        )
      captures:
        1: support.constant             # aaa
        2: support.constant             # authentication
        3: support.constant             # management protocol
        4: support.constant             # console
        5: string.unquoted              # tacacs or local
        6: support.constant             # authorization
        7: support.constant             # exec authentication-server auto-enable
        8: support.constant             # accounting
        9: support.constant             # accounting management protocol tacas or local
        10: string.unquoted             # accounting management protocol tacas or local

  object_group_service:
    - match: '^\s*(object-group)\s+(service)\s+(\S+)(\s+(?:tcp-udp)|(?:tcp)|(?:udp))?'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: string.unquoted
        4: support.constant
      push:
        - meta_content_scope: text.network.cisco.asa.object_group.service
        - include: description  
        - include: object_group_group_object
        - match: >
            (?xi)
            ^\s*
            (port-object)\s+
            (?:
              (?:({{operators}})\s+({{port_target}}))|
              (?:(range)\s+({{port_target}}\s+{{port_target}}))
            )
          captures:
            1: support.constant             # port-object
            2: support.constant             # operator
            3: constant.numeric             # target
            4: support.constant             # range
            5: constant.numeric             # target range
        - match: |
            (?xi) 
            (?:
              ^\s*
              (service-object)\s+
              ({{protocol_target}})\s+
              (source|destination)\s+
              (?:
                (?:({{operators}})\s+({{port_target}}))|
                (?:(range)\s+({{port_target}}\s+{{port_target}}))
              )
            )
          captures:
            1: support.constant             # service-object
            2: constant.numeric             # protocol
            3: support.constant             # target
            4: support.constant             # operator
            5: constant.numeric             # target
            6: support.constant             # range
            7: constant.numeric             # target range

  access_list:
    - include: access_list_cached_log_flows
    - include: access_list_remark
    - include: access_list_icmp
    - include: access_list_ip
    - include: building_access_list

  building_access_list:
    - match: >
        (?x)
        (access-list)\s+
        ([^;\s]+)\s+(?:(line)\s+(\d+)\s+)?(extended)\s+(?:(permit)|(deny))\s+.*
      captures:
        0: asa.acl_entry
        1: support.constant                       # access-list
        2: string.unquoted                        # access-list name
        3: support.constant                       # line
        4: constant.numeric                       # line number
        5: support.constant                       # extended
        6: entity.other.attribute-name            # permit
        7: keyword.other                          # deny

  access_list_remark:
    - match: >
        (?x)
        (access-list)\s+
        ([^;\s]+)\s+(?:(line)\s+(\d+)\s+)?(remark)(\s+.*)?
      captures:
        1: support.constant                       # access-list
        2: string.unquoted                        # access-list name
        3: support.constant                       # line
        4: constant.numeric                       # line number
        5: support.constant                       # remark
        6: comment.unquoted                       # remark string

  access_list_cached_log_flows:
    - match: >
        (?x)
        access-list\s+cached\s+(\S+)\s+log\s+flows:\s+
        total\s+\d+,\s+denied\s+\d+\s+
        \(deny-flow-max\s+\d+\)
      captures:
        0: comment.unquoted
      push:
        - match: '\s+alert-interval\s+\d+'
          captures:
            0: comment.unquoted
          pop: true

  access_list_ip:
    - match: |
        (?x)
        (access-list)\s+
        (?:
          (?:
            ([^;\s]+)(?:  # acl name
              (?:(;)\s+(\d+)\s+(elements;\s+name\s+hash:)\s+(0x\h{8}))|
              (?:\s+(line)\s+(\d+))?\s+
              (?:     # start ace: ip, tcp, udp
                (?:(extended)\s+(?:(permit)|(deny)))\s+
                (?:     # start ip, tcp, udp
                  (?:   # start protocol
                    (?:(object-group)\s+(\S+))|
                    ((?:{{protocol_target}})|\d+)
                  )     # end protocol
                  (?:   # l3 network source
                    (?:\s+(host)\s+({{ip}}))|
                    (?:\s+({{ip}})\s+({{subnet_mask}}))|
                    (?:\s+(object-group)\s+(\S+))|
                    (?:\s+(any(?:4|6)?))
                  )     # end l3 network source
                  (?:   # start l4 port source
                    (?:\s+({{operators}})\s+({{port_target}}))|
                    (?:\s+(range)\s+({{port_target}})\s+({{port_target}}))|
                    (?:\s+(object-group)\s+(\S+))
                  )?    # end l4 port source
                  (?:   # start l3 network destination
                    (?:\s+(host)\s+({{ip}}))|
                    (?:\s+({{ip}})\s+({{subnet_mask}}))|
                    (?:\s+(object-group)\s+(\S+))|
                    (?:\s+(any(?:4|6)?))
                  )     # end l3 network destination
                  (?:   # start l4 port destination
                    (?:\s+({{operators}})\s+({{port_target}}))|
                    (?:\s+(range)\s+({{port_target}})\s+({{port_target}}))|
                    (?:\s+(object-group)\s+(\S+))
                  )?    # end l4 port destination 
                )       # end ip, tcp, udp
                (?:
                  (?:\s+(log)\s+(informational|debugging|notifications))?
                  (?:\s+(interval)\s+(\d+))?
                  (?:\s+(disable))?
                  (?:\s+(default))?
                  (?:\s+(inactive)(?:\s+(\(inactive\)))?)?
                  (?:\s+(0x\h{8}))?
                  (\s+\(hitcnt=\d+\))?
                )?
              ) # end ace: ip, tcp, udp
            )
          )
        )
      scope: text.network.cisco.acl.extended.ace
      captures:
        1: support.constant                       # access-list
        2: string.unquoted                        # access-list name
        3: support.constant                       # ;
        4: constant.numeric                       # element number
        5: support.constant                       # element
        6: comment.unquoted                       # name hash
        7: support.constant                       # line
        8: constant.numeric                       # line number
        9: support.constant                       # line
        10: entity.other.attribute-name           # permit
        11: keyword.other                         # deny
        12: support.constant.protocol.object      # protocol object-group
        13: string.unquoted.protocol.object.name  # protocol object-group name
        14: constant.numeric.protocol             # protocol        
        15: support.constant.host                 # network host
        16: constant.numeric.host.ip              # network host ip
        17: constant.numeric                      # network ip
        18: constant.numeric                      # network subnet
        19: support.constant                      # object-group
        20: string.unquoted                       # object-group name
        21: constant.numeric                      # network any
        22: support.constant                      # operator
        23: constant.numeric                      # port target
        24: support.constant                      # port range
        25: constant.numeric                      # port range low
        26: constant.numeric                      # port range high
        27: support.constant                      # object-group
        28: string.unquoted                       # object-group name
        29: support.constant.host                 # network host
        30: constant.numeric.host.ip              # network host ip
        31: constant.numeric             # network ip
        32: constant.numeric             # network subnet
        33: support.constant             # object-group
        34: string.unquoted              # object-group name
        35: constant.numeric             # network any
        36: support.constant             # operator
        37: constant.numeric             # port target
        38: support.constant             # port range
        39: constant.numeric             # port range low
        40: constant.numeric             # port range high
        41: support.constant             # object-group
        42: string.unquoted              # object-group name
        43: support.constant             # log
        44: string.unquoted              # log level
        45: support.constant             # log interval
        46: constant.numeric             # log interval value
        47: support.constant             # disable
        48: support.constant             # default
        49: invalid.deprecated           # inactive
        50: comment.unquoted             # inactive
        51: comment.unquoted             # ace hash
        52: comment.unquoted             # hitcount

  access_list_icmp:
    - match: |
        (?x)
        (access-list)\s+
        (?:
          (?:
            ([^;\s]+)(?:
              (?:     # start ace: icmp
                (?:\s+(line)\s+(\d+)\s+)?
                (?:(extended)\s+(?:(permit)|(deny)))\s+
                (?:     # start ip, tcp, udp
                  (?:   # start protocol
                    (?:(object-group)\s+(\S+))|
                    (icmp)
                  )     # end protocol
                  (?:   # l3 network source
                    (?:\s+(host)\s+({{ip}}))|
                    (?:\s+({{ip}})\s+({{subnet_mask}}))|
                    (?:\s+(object-group)\s+(\S+))|
                    (?:\s+(any(?:4|6)?))
                  )     # end l3 network source
                  (?:   # start icmp types source
                    (?:\s+({{icmp_types}}))|
                    (?:\s+(object-group)\s+(\S+))
                  )?    # end icmp types source
                  (?:   # start l3 network destination
                    (?:\s+(host)\s+({{ip}}))|
                    (?:\s+({{ip}})\s+({{subnet_mask}}))|
                    (?:\s+(object-group)\s+(\S+))|
                    (?:\s+(any(?:4|6)?))
                  )     # end l3 network destination
                  (?:   # start icmp types destination
                    (?:\s+({{icmp_types}}))|
                    (?:\s+(object-group)\s+(\S+))
                  )?    # end icmp types destination
                )       # end ip, tcp, udp
                (?:
                  (?:\s+(log)\s+(informational|debugging|notifications))?
                  (?:\s+(interval)\s+(\d+))?
                  (?:\s+(disable))?
                  (?:\s+(default))?
                  (?:
                    \s+(inactive)
                    (?:
                      \s+(\(inactive\))
                    )?
                  )?
                  (?:\s+(0x\h{8}))?
                  (\s+\(hitcnt=\d+\))?
                )?
              ) # end ace: ip, tcp, udp
            )
          )
        )
      scope: text.network.cisco.acl.extended.ace
      captures:
        1: support.constant                       # access-list
        2: string.unquoted                        # access-list name
        3: support.constant                       # line
        4: constant.numeric                       # line number
        5: support.constant                       # line
        6: entity.other.attribute-name           # permit
        7: keyword.other                         # deny
        8: support.constant.protocol.object      # protocol object-group
        9: string.unquoted.protocol.object.name  # protocol object-group name
        10: constant.numeric.protocol             # protocol        
        11: support.constant.host                 # network host
        12: constant.numeric.host.ip              # network host ip
        13: constant.numeric                      # network ip
        14: constant.numeric                      # network subnet
        15: support.constant                      # object-group
        16: string.unquoted                       # object-group name
        17: constant.numeric                      # network any
        18: support.constant                      # icmp type source
        19: support.constant                      # object-group
        20: string.unquoted                       # object-group name
        21: support.constant.host                 # network host
        22: constant.numeric.host.ip              # network host ip
        23: constant.numeric             # network ip
        24: constant.numeric             # network subnet
        25: support.constant             # object-group
        26: string.unquoted              # object-group name
        27: constant.numeric             # network any
        28: support.constant             # icmp type destination
        29: support.constant             # object-group
        30: string.unquoted              # object-group name
        31: support.constant             # log
        32: string.unquoted              # log level
        33: support.constant             # log interval
        34: constant.numeric             # log interval value
        35: support.constant             # disable
        36: support.constant             # default
        37: invalid.deprecated.inactive  # inactive
        38: comment.unquoted.inactive    # inactive
        39: comment.unquoted             # ace hash
        40: comment.unquoted             # hitcount

  icmp_protocol_settings:
    - include: icmp_ipv4_protocol_settings
    - include: icmp_ipv6_protocol_settings

  icmp_ipv4_protocol_settings:
    - match: |
        (?xi)
        ^\s*
        (?:
          (icmp)\s+
          (?:(permit)|(deny))\s+
          ({{network_target}})\s+
          (\S+)
        )
      captures:
        1: support.constant             # http server enable
        2: entity.other.attribute-name  # management protocol
        3: keyword.other                # management network
        4: constant.numeric             # management subnet mask
        5: entity.other.attribute-name  # management nameif

  icmp_ipv6_protocol_settings:
    - match: |
        (?xi)
        ^\s*
        (?:
          (ipv6\s+icmp)\s+
          (?:(permit)|(deny))\s+
          ({{ipv6_prefix}})\s+
          (\S+)
        )
      captures:
        1: support.constant             # http server enable
        2: entity.other.attribute-name  # management protocol
        3: keyword.other                # management network
        4: constant.numeric             # management subnet mask
        5: entity.other.attribute-name  # management nameif

  protocol_settings:
    - include: icmp_protocol_settings
    - match: |
        (?xi)
        ^\s*
        (?:
          (http\s+server\s+enable)|
          (?:({{management_protocols}})\s+({{ip}})\s+({{subnet_mask}})\s+(\S+))|
          (?:((?:{{management_protocols}})\s+timeout)\s+(\d+))|
          (?:(ssh\s+key-exchange\s+group)\s+(\S+))|
          (?:(ssh\s+version)\s+(\d+))
        )
      captures:
        1: support.constant             # http server enable
        2: support.constant             # management protocol
        3: constant.numeric             # management network
        4: constant.numeric             # management subnet mask
        5: entity.other.attribute-name  # management nameif
        6: support.constant             # management protocol timeout
        7: constant.numeric             # management protocol timeout value
        8: support.constant             # ssh dh group
        9: string.unquoted              # ssh dh group name
        10: support.constant            # ssh version
        11: constant.numeric            # ssh version value

  logging:
    - match: |
        (?xi)
        ^\s*
        (logging)\s+
        (?:
          (enable)|
          (timestamp)|
          (?:(buffer-size)\s+(\d+))|
          (?:(buffered|trap|asdm)\s+(\S+))|
          (?:(device-id\s+string)\s+(\S+))|
          (?:(host)\s+(\S+)\s+({{ip}}))
        )
      captures:
        1: support.constant             # logging
        2: support.constant             # enable
        3: support.constant             # timestamp
        4: support.constant             # buffer-size
        5: constant.numeric             # buffer-size value
        6: support.constant             # log protocol
        7: string.unquoted              # buffered value
        8: support.constant             # logging device-id string
        9: string.unquoted              # logging device-id string value
        10: support.constant            # host 
        11: entity.other.attribute-name # host nameif
        12: constant.numeric            # host nameif target ip

  ssh_key_exchange:
      - match: '^\s*(ssh)\s+(key-exchange)\s+(group)\s+(\S+)'
        captures:
          1: support.constant
          2: support.constant
          3: support.constant
          4: string.unquoted

  password:
    - match: >
        (?x)
        ^\s*
        (?:(password\s+encryption)\s+(aes))|
        (?:(passwd)\s+(\S+)(\s+encrypted)?)
      captures:
        1: support.constant                 # password encryption
        2: entity.other.attribute-name      # password encryption type
        3: support.constant                 # passwd
        4: string.unquoted                 # passwd value
        5: support.constant                 # passwd encrypted

  username:
    - match: '^\s*(username)\s+(\S+)\s+(password)\s+(\S+)\s+(encrypted\s+privilege)\s+(\d+)'
      captures:
        1: support.constant
        2: string.unquoted
        3: support.constant
        4: string.unquoted
        5: support.constant
        6: constant.numeric

  snmp:
    - match: |
        (?xi)
        ^\s*
        (snmp-server)\s+
        (?:
          (?:(location)\s+(\S+))|
          (?:(contact)\s+(\S+))|
          (?:
            (host)\s+(\S+)\s+({{ip}})\s+
            (?:
              (?:(?:((?:poll)|(?:trap))\s+)?(community)\s+
                (?:
                  (?:(\d+)\s+(\S+)(?:\s+(version)\s+(1|2c))?(?:\s+(udp-port)\s+(\d+))?)|
                  (\S+)
                )
              )
            )
          )
        )
      captures:
        1: support.constant             # snmp-server
        2: support.constant             # location
        3: string.unquoted              # location value
        4: support.constant             # contact
        5: string.unquoted              # contact value
        6: support.constant             # host 
        7: entity.other.attribute-name              # host nameif
        8: constant.numeric             # host nameif target ip
        9: support.constant             # community
        10: support.constant             # poll or trap
        11: constant.numeric            # community number
        12: string.unquoted             # community value
        13: support.constant             # community version
        14: constant.numeric             # community version value
        15: support.constant             # community udp-port
        16: constant.numeric             # community udp-port value
        17: string.unquoted             # community value

  ip_route: 
    - include: ipv4_route

  ipv4_route:
    - match: |
        (?x) 
        ^\s*
        (route)\s+
        (\S+)\s+
        ({{ip_prefix}})\s+
        ({{ip}})
        (\s+\d+)?
      captures:
        1: support.constant              # route
        2: entity.other.attribute-name   # nameif
        3: constant.numeric              # network + subnet
        4: constant.numeric              # next hop ip
        5: constant.numeric              # metric

  vlan:
    - match: '^\s*(vlan)\s+({{vlan_id}})'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.numeric
      push:
      - meta_content_scope: text.network.cisco.vlan
      - match: (name)\s+(\S+)
        captures:
          1: support.constant
          2: string.unquoted
      - match: (mode)\s+(fabricpath)
        captures:
          1: support.constant
          2: support.constant
  
  context:
    - match: '^\s*(context)\s+(\S+)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
      push:
      - meta_content_scope: text.network.cisco.asa.context
      - include: description
      - match: (config-url)\s+(disk)(\d+)(:/)(\S+)
        captures:
          1: support.constant
          2: support.constant
          3: constant.numeric
          4: support.constant
          5: string.unquoted
      - match: >
          (?xi)
          (allocate-interface)\s+
          (?:
            ({{interface_names}})\s*
            ({{interface_numbers}})
            (?:
              (-)
              ({{interface_names}})\s*
              ({{interface_numbers}})
            )?
          )
        captures:
          1: support.constant
          2: entity.other.attribute-name
          3: constant.numeric
          4: support.constant
          5: entity.other.attribute-name
          6: constant.numeric

  fragment_chain:
    - match: '^\s*(fragment\s+chain)\s+(\d+)\s+(\S+)'
      captures:
        1: support.constant
        2: constant.numeric
        3: string.unquoted

  access_group:
    - match: '^\s*(access-group)\s+(\S+)\s+((?:in|out)\s+interface)\s+(\S+)'
      captures:
        1: support.constant
        2: string.unquoted
        3: support.constant
        4: string.unquoted

  interface_mtu:
    - match: '^\s*(mtu)\s+(\S+)\s+(\d+)'
      captures:
        1: support.constant
        2: string.unquoted
        3: constant.numeric

  reverse_path:
    - match: '^\s*(ip\s+verify\s+reverse-path\s+interface)\s+(\S+)'
      captures:
        1: support.constant
        2: string.unquoted

  interface:
    - match: |
        (?xi)
        ^\s*(interface)\s+
        (?:
          (?:(range)\s+({{interface_names}})\s*({{interface_number_ranged}}))|
          ({{interface_names}})\s*({{interface_numbers}})
        )
      captures:
        0: cisco.scope
        1: variable.parameter             # interface
        2: support.constant               # range
        3: entity.other.attribute-name    # interface name
        4: constant.numeric               # interface number
        5: entity.other.attribute-name    # interface name
        6: constant.numeric               # interface number
      push:
      - meta_content_scope: text.network.cisco.interface
      - include: description
      - match: |
          (?x)^\s*
          (?:(ipv6\s+address)\s+({{ipv6_prefix}})(?:\s+(standby)\s+({{ipv6}}))?)|
          (?:(ip\s+address)\s+({{ip}}\s+{{subnet_mask}})(?:(\s+standby)\s+({{ip}}))?)|
          (shutdown)|
          (?:(nameif)\s+(\S+))|
          (?:(security-level)\s+(\S+))
        captures:
          1: support.constant                          # ipv6
          2: constant.numeric                          # ipv6 address
          3: support.constant                          # ipv6
          4: constant.numeric                          # ipv6
          5: support.constant                          # ip address
          6: constant.numeric                          # ip address ipv4 address
          7: support.constant                          # ip address standby
          8: constant.numeric                          # ip address ip
          9: support.constant                          # ip address standby
          10: support.constant                          # nameif
          11: entity.other.attribute-name               # nameif name
          12: support.constant                          # security-level
          13: constant.numeric                         # security-level id

  show:
    - include: show_vlan
    - include: show_route 
    - include: show_interface 
    - include: show_run_interface

  show_interface:
    - match: '\s*(show\s+interface)(?:(\s+{{interface_names}})\s*({{interface_numbers}}))?'
      captures:
        1: support.constant
        2: entity.other.attribute-name
        3: constant.numeric
        4: support.constant

  show_run_interface:
    - match: '\s*(show\s+run\s+interface)(?:(\s+{{interface_names}})\s*({{interface_numbers}}))?'
      captures:
        1: support.constant
        2: entity.other.attribute-name
        3: constant.numeric
        4: support.constant

  show_vlan:
    - match: '\s*(show\s+vlan)(\s+(id)\s+({{vlan_id}}))?'
      captures:
        1: support.constant
        2: constant.numeric
        3: support.constant
        4: constant.numeric

  show_route:
    - match: |
        (?xi)
        \s*(show)\s+
        (?:
          (?:
            (ipv6\s+route)
            (?:\s+(vrf)\s+(\S+))?
            (\s+{{ipv6}})?
          )
          |
          (?:
            (ip\s+route)
            (?:\s+(vrf)\s+(\S+))?
            (\s+{{ip}})?
          )

        )
      captures:
        1: support.constant           # show
        2: support.constant           # ipv6 route
        3: support.constant           # ipv6 vrf
        4: string.unquoted            # ipv6 vrf name
        5: constant.numeric           # ipv6 prefix
        6: support.constant           # ip route
        7: support.constant           # ip vrf
        8: string.unquoted            # ip vrf name
        9: constant.numeric           # ip prefix

  locations:
    - include: location_local
    - include: location_remote

  location_remote:
    - match: ((?:t?ftp)|scp)(://)((?:\d+\.){3}\d+)(\/\S*)?
      captures:
        1: entity.other.attribute-name
        2: support.constant
        3: constant.language
        4: support.constant

  location_local:
    - match: ({{drives}}|(?:running|startup)-config)
      captures:
        1: support.constant

  write:
    - include: write_network
    - match: '^\s*(write)\s*'
      captures:
        1: support.constant

  write_network:
    - match: '^\s*(write)\s+(net)'
      captures:
        1: support.constant
        2: support.constant

  logout:
    - match: '^\s*(logout)\s*'
      captures:
        1: support.constant

  copy:
    - match: '^\s*(copy)\s*'
      set: copy_location_source
      captures:
        1: support.constant

  copy_location_source:
    - match: \s
      set: copy_location_destination
    - include: locations

  copy_location_destination:
    - match: (?:\s|{{comment}}|$)
      pop: true
    - include: locations

  pipe:
    - match: (?<=\s)(\|)
      scope: text.network.cisco.pipe
      captures:
        1: keyword.other
      push: 
        - meta_content_scope: text.network.cisco.pipe
        - match: '(?=(?:{{comment}})|$)'
          pop: true
        - match: >
            (?x)
            \s+
            (?:
              (include)|
              (exclude)
            )
            \s+
            ([^{{comment}}]*)
          captures:
            1: entity.other.attribute-name
            2: keyword.other
            3: string.unquoted

  show_drives:
    - match: '\s*(show)\s+({{drives}})'
      captures:
        1: support.constant
        2: support.constant
